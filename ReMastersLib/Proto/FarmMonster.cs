// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/FarmMonster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/FarmMonster.proto</summary>
  public static partial class FarmMonsterReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/FarmMonster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FarmMonsterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90by9GYXJtTW9uc3Rlci5wcm90bxIMUmVNYXN0ZXJzTGliInkKC0Zh",
            "cm1Nb25zdGVyEhcKD2Zhcm1fbW9uc3Rlcl9pZBgBIAEoAxISCgp0cmFpbmVy",
            "X2lkGAIgASgDEhMKC25iX3Bhc3NpdmVzGAMgASgFEhAKCGlzX3NoaW55GAQg",
            "ASgIEgoKAnU1GAUgASgDEgoKAnU2GAYgASgFIj4KEEZhcm1Nb25zdGVyVGFi",
            "bGUSKgoHZW50cmllcxgBIAMoCzIZLlJlTWFzdGVyc0xpYi5GYXJtTW9uc3Rl",
            "cmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.FarmMonster), global::ReMastersLib.FarmMonster.Parser, new[]{ "FarmMonsterId", "TrainerId", "NbPassives", "IsShiny", "U5", "U6" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.FarmMonsterTable), global::ReMastersLib.FarmMonsterTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FarmMonster : pb::IMessage<FarmMonster> {
    private static readonly pb::MessageParser<FarmMonster> _parser = new pb::MessageParser<FarmMonster>(() => new FarmMonster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FarmMonster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.FarmMonsterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FarmMonster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FarmMonster(FarmMonster other) : this() {
      farmMonsterId_ = other.farmMonsterId_;
      trainerId_ = other.trainerId_;
      nbPassives_ = other.nbPassives_;
      isShiny_ = other.isShiny_;
      u5_ = other.u5_;
      u6_ = other.u6_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FarmMonster Clone() {
      return new FarmMonster(this);
    }

    /// <summary>Field number for the "farm_monster_id" field.</summary>
    public const int FarmMonsterIdFieldNumber = 1;
    private long farmMonsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FarmMonsterId {
      get { return farmMonsterId_; }
      set {
        farmMonsterId_ = value;
      }
    }

    /// <summary>Field number for the "trainer_id" field.</summary>
    public const int TrainerIdFieldNumber = 2;
    private long trainerId_;
    /// <summary>
    /// Trainer.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TrainerId {
      get { return trainerId_; }
      set {
        trainerId_ = value;
      }
    }

    /// <summary>Field number for the "nb_passives" field.</summary>
    public const int NbPassivesFieldNumber = 3;
    private int nbPassives_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NbPassives {
      get { return nbPassives_; }
      set {
        nbPassives_ = value;
      }
    }

    /// <summary>Field number for the "is_shiny" field.</summary>
    public const int IsShinyFieldNumber = 4;
    private bool isShiny_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShiny {
      get { return isShiny_; }
      set {
        isShiny_ = value;
      }
    }

    /// <summary>Field number for the "u5" field.</summary>
    public const int U5FieldNumber = 5;
    private long u5_;
    /// <summary>
    /// same as trainer_id ?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long U5 {
      get { return u5_; }
      set {
        u5_ = value;
      }
    }

    /// <summary>Field number for the "u6" field.</summary>
    public const int U6FieldNumber = 6;
    private int u6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U6 {
      get { return u6_; }
      set {
        u6_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FarmMonster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FarmMonster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FarmMonsterId != other.FarmMonsterId) return false;
      if (TrainerId != other.TrainerId) return false;
      if (NbPassives != other.NbPassives) return false;
      if (IsShiny != other.IsShiny) return false;
      if (U5 != other.U5) return false;
      if (U6 != other.U6) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FarmMonsterId != 0L) hash ^= FarmMonsterId.GetHashCode();
      if (TrainerId != 0L) hash ^= TrainerId.GetHashCode();
      if (NbPassives != 0) hash ^= NbPassives.GetHashCode();
      if (IsShiny != false) hash ^= IsShiny.GetHashCode();
      if (U5 != 0L) hash ^= U5.GetHashCode();
      if (U6 != 0) hash ^= U6.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FarmMonsterId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FarmMonsterId);
      }
      if (TrainerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TrainerId);
      }
      if (NbPassives != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NbPassives);
      }
      if (IsShiny != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsShiny);
      }
      if (U5 != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(U5);
      }
      if (U6 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(U6);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FarmMonsterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FarmMonsterId);
      }
      if (TrainerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TrainerId);
      }
      if (NbPassives != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NbPassives);
      }
      if (IsShiny != false) {
        size += 1 + 1;
      }
      if (U5 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(U5);
      }
      if (U6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U6);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FarmMonster other) {
      if (other == null) {
        return;
      }
      if (other.FarmMonsterId != 0L) {
        FarmMonsterId = other.FarmMonsterId;
      }
      if (other.TrainerId != 0L) {
        TrainerId = other.TrainerId;
      }
      if (other.NbPassives != 0) {
        NbPassives = other.NbPassives;
      }
      if (other.IsShiny != false) {
        IsShiny = other.IsShiny;
      }
      if (other.U5 != 0L) {
        U5 = other.U5;
      }
      if (other.U6 != 0) {
        U6 = other.U6;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FarmMonsterId = input.ReadInt64();
            break;
          }
          case 16: {
            TrainerId = input.ReadInt64();
            break;
          }
          case 24: {
            NbPassives = input.ReadInt32();
            break;
          }
          case 32: {
            IsShiny = input.ReadBool();
            break;
          }
          case 40: {
            U5 = input.ReadInt64();
            break;
          }
          case 48: {
            U6 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FarmMonsterTable : pb::IMessage<FarmMonsterTable> {
    private static readonly pb::MessageParser<FarmMonsterTable> _parser = new pb::MessageParser<FarmMonsterTable>(() => new FarmMonsterTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FarmMonsterTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.FarmMonsterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FarmMonsterTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FarmMonsterTable(FarmMonsterTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FarmMonsterTable Clone() {
      return new FarmMonsterTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.FarmMonster> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.FarmMonster.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.FarmMonster> entries_ = new pbc::RepeatedField<global::ReMastersLib.FarmMonster>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.FarmMonster> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FarmMonsterTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FarmMonsterTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FarmMonsterTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
