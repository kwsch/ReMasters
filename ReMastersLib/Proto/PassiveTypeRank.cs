// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/PassiveTypeRank.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/PassiveTypeRank.proto</summary>
  public static partial class PassiveTypeRankReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/PassiveTypeRank.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PassiveTypeRankReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtQcm90by9QYXNzaXZlVHlwZVJhbmsucHJvdG8SDFJlTWFzdGVyc0xpYiKB",
            "AQoPUGFzc2l2ZVR5cGVSYW5rEgoKAnUxGAEgASgFEgoKAnUyGAIgASgFEhQK",
            "DHBhc3NpdmVfMV9pZBgDIAEoBRIUCgxwYXNzaXZlXzJfaWQYBCABKAUSFAoM",
            "cGFzc2l2ZV8zX2lkGAUgASgFEhQKDHBhc3NpdmVfNF9pZBgGIAEoBSJGChRQ",
            "YXNzaXZlVHlwZVJhbmtUYWJsZRIuCgdlbnRyaWVzGAEgAygLMh0uUmVNYXN0",
            "ZXJzTGliLlBhc3NpdmVUeXBlUmFua2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.PassiveTypeRank), global::ReMastersLib.PassiveTypeRank.Parser, new[]{ "U1", "U2", "Passive1Id", "Passive2Id", "Passive3Id", "Passive4Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.PassiveTypeRankTable), global::ReMastersLib.PassiveTypeRankTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PassiveTypeRank : pb::IMessage<PassiveTypeRank> {
    private static readonly pb::MessageParser<PassiveTypeRank> _parser = new pb::MessageParser<PassiveTypeRank>(() => new PassiveTypeRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveTypeRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.PassiveTypeRankReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveTypeRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveTypeRank(PassiveTypeRank other) : this() {
      u1_ = other.u1_;
      u2_ = other.u2_;
      passive1Id_ = other.passive1Id_;
      passive2Id_ = other.passive2Id_;
      passive3Id_ = other.passive3Id_;
      passive4Id_ = other.passive4Id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveTypeRank Clone() {
      return new PassiveTypeRank(this);
    }

    /// <summary>Field number for the "u1" field.</summary>
    public const int U1FieldNumber = 1;
    private int u1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U1 {
      get { return u1_; }
      set {
        u1_ = value;
      }
    }

    /// <summary>Field number for the "u2" field.</summary>
    public const int U2FieldNumber = 2;
    private int u2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U2 {
      get { return u2_; }
      set {
        u2_ = value;
      }
    }

    /// <summary>Field number for the "passive_1_id" field.</summary>
    public const int Passive1IdFieldNumber = 3;
    private int passive1Id_;
    /// <summary>
    /// passive_skill_name_xx.lsd / passive_skill_description_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passive1Id {
      get { return passive1Id_; }
      set {
        passive1Id_ = value;
      }
    }

    /// <summary>Field number for the "passive_2_id" field.</summary>
    public const int Passive2IdFieldNumber = 4;
    private int passive2Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passive2Id {
      get { return passive2Id_; }
      set {
        passive2Id_ = value;
      }
    }

    /// <summary>Field number for the "passive_3_id" field.</summary>
    public const int Passive3IdFieldNumber = 5;
    private int passive3Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passive3Id {
      get { return passive3Id_; }
      set {
        passive3Id_ = value;
      }
    }

    /// <summary>Field number for the "passive_4_id" field.</summary>
    public const int Passive4IdFieldNumber = 6;
    private int passive4Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passive4Id {
      get { return passive4Id_; }
      set {
        passive4Id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveTypeRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveTypeRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (U1 != other.U1) return false;
      if (U2 != other.U2) return false;
      if (Passive1Id != other.Passive1Id) return false;
      if (Passive2Id != other.Passive2Id) return false;
      if (Passive3Id != other.Passive3Id) return false;
      if (Passive4Id != other.Passive4Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (U1 != 0) hash ^= U1.GetHashCode();
      if (U2 != 0) hash ^= U2.GetHashCode();
      if (Passive1Id != 0) hash ^= Passive1Id.GetHashCode();
      if (Passive2Id != 0) hash ^= Passive2Id.GetHashCode();
      if (Passive3Id != 0) hash ^= Passive3Id.GetHashCode();
      if (Passive4Id != 0) hash ^= Passive4Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (U1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(U1);
      }
      if (U2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(U2);
      }
      if (Passive1Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Passive1Id);
      }
      if (Passive2Id != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Passive2Id);
      }
      if (Passive3Id != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Passive3Id);
      }
      if (Passive4Id != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Passive4Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (U1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U1);
      }
      if (U2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U2);
      }
      if (Passive1Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Passive1Id);
      }
      if (Passive2Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Passive2Id);
      }
      if (Passive3Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Passive3Id);
      }
      if (Passive4Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Passive4Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveTypeRank other) {
      if (other == null) {
        return;
      }
      if (other.U1 != 0) {
        U1 = other.U1;
      }
      if (other.U2 != 0) {
        U2 = other.U2;
      }
      if (other.Passive1Id != 0) {
        Passive1Id = other.Passive1Id;
      }
      if (other.Passive2Id != 0) {
        Passive2Id = other.Passive2Id;
      }
      if (other.Passive3Id != 0) {
        Passive3Id = other.Passive3Id;
      }
      if (other.Passive4Id != 0) {
        Passive4Id = other.Passive4Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            U1 = input.ReadInt32();
            break;
          }
          case 16: {
            U2 = input.ReadInt32();
            break;
          }
          case 24: {
            Passive1Id = input.ReadInt32();
            break;
          }
          case 32: {
            Passive2Id = input.ReadInt32();
            break;
          }
          case 40: {
            Passive3Id = input.ReadInt32();
            break;
          }
          case 48: {
            Passive4Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassiveTypeRankTable : pb::IMessage<PassiveTypeRankTable> {
    private static readonly pb::MessageParser<PassiveTypeRankTable> _parser = new pb::MessageParser<PassiveTypeRankTable>(() => new PassiveTypeRankTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveTypeRankTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.PassiveTypeRankReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveTypeRankTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveTypeRankTable(PassiveTypeRankTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveTypeRankTable Clone() {
      return new PassiveTypeRankTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.PassiveTypeRank> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.PassiveTypeRank.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.PassiveTypeRank> entries_ = new pbc::RepeatedField<global::ReMastersLib.PassiveTypeRank>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.PassiveTypeRank> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveTypeRankTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveTypeRankTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveTypeRankTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
