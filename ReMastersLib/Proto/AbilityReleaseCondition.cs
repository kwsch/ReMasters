// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/AbilityReleaseCondition.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/AbilityReleaseCondition.proto</summary>
  public static partial class AbilityReleaseConditionReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/AbilityReleaseCondition.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AbilityReleaseConditionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNQcm90by9BYmlsaXR5UmVsZWFzZUNvbmRpdGlvbi5wcm90bxIMUmVNYXN0",
            "ZXJzTGliIlAKF0FiaWxpdHlSZWxlYXNlQ29uZGl0aW9uEhQKDGNvbmRpdGlv",
            "bl9pZBgBIAEoBRIMCgR0eXBlGAIgASgFEhEKCXBhcmFtZXRlchgDIAEoBSJW",
            "ChxBYmlsaXR5UmVsZWFzZUNvbmRpdGlvblRhYmxlEjYKB2VudHJpZXMYASAD",
            "KAsyJS5SZU1hc3RlcnNMaWIuQWJpbGl0eVJlbGVhc2VDb25kaXRpb25iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.AbilityReleaseCondition), global::ReMastersLib.AbilityReleaseCondition.Parser, new[]{ "ConditionId", "Type", "Parameter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.AbilityReleaseConditionTable), global::ReMastersLib.AbilityReleaseConditionTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AbilityReleaseCondition : pb::IMessage<AbilityReleaseCondition> {
    private static readonly pb::MessageParser<AbilityReleaseCondition> _parser = new pb::MessageParser<AbilityReleaseCondition>(() => new AbilityReleaseCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbilityReleaseCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.AbilityReleaseConditionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityReleaseCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityReleaseCondition(AbilityReleaseCondition other) : this() {
      conditionId_ = other.conditionId_;
      type_ = other.type_;
      parameter_ = other.parameter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityReleaseCondition Clone() {
      return new AbilityReleaseCondition(this);
    }

    /// <summary>Field number for the "condition_id" field.</summary>
    public const int ConditionIdFieldNumber = 1;
    private int conditionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConditionId {
      get { return conditionId_; }
      set {
        conditionId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// ability_release_condition_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "parameter" field.</summary>
    public const int ParameterFieldNumber = 3;
    private int parameter_;
    /// <summary>
    /// required # of tiles, sync move level... 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Parameter {
      get { return parameter_; }
      set {
        parameter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbilityReleaseCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbilityReleaseCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConditionId != other.ConditionId) return false;
      if (Type != other.Type) return false;
      if (Parameter != other.Parameter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConditionId != 0) hash ^= ConditionId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Parameter != 0) hash ^= Parameter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConditionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConditionId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Parameter != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Parameter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConditionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConditionId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Parameter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Parameter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbilityReleaseCondition other) {
      if (other == null) {
        return;
      }
      if (other.ConditionId != 0) {
        ConditionId = other.ConditionId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Parameter != 0) {
        Parameter = other.Parameter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConditionId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Parameter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AbilityReleaseConditionTable : pb::IMessage<AbilityReleaseConditionTable> {
    private static readonly pb::MessageParser<AbilityReleaseConditionTable> _parser = new pb::MessageParser<AbilityReleaseConditionTable>(() => new AbilityReleaseConditionTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbilityReleaseConditionTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.AbilityReleaseConditionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityReleaseConditionTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityReleaseConditionTable(AbilityReleaseConditionTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityReleaseConditionTable Clone() {
      return new AbilityReleaseConditionTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.AbilityReleaseCondition> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.AbilityReleaseCondition.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.AbilityReleaseCondition> entries_ = new pbc::RepeatedField<global::ReMastersLib.AbilityReleaseCondition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.AbilityReleaseCondition> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbilityReleaseConditionTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbilityReleaseConditionTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbilityReleaseConditionTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
