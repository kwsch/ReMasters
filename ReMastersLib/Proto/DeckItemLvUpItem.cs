// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/DeckItemLvUpItem.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/DeckItemLvUpItem.proto</summary>
  public static partial class DeckItemLvUpItemReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/DeckItemLvUpItem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeckItemLvUpItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxQcm90by9EZWNrSXRlbUx2VXBJdGVtLnByb3RvEgxSZU1hc3RlcnNMaWIi",
            "fQoQRGVja0l0ZW1MdlVwSXRlbRIPCgdpdGVtX2lkGAEgASgDEhgKEGl0ZW1f",
            "c3ViQ2F0ZWdvcnkYAiABKAUSFwoPaXRlbV9pbWFnZV9uYW1lGAMgASgJEhIK",
            "Cml0ZW1fZnJhbWUYBCABKAUSEQoJaXRlbV90eXBlGAUgASgFIkgKFURlY2tJ",
            "dGVtTHZVcEl0ZW1UYWJsZRIvCgdlbnRyaWVzGAEgAygLMh4uUmVNYXN0ZXJz",
            "TGliLkRlY2tJdGVtTHZVcEl0ZW1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.DeckItemLvUpItem), global::ReMastersLib.DeckItemLvUpItem.Parser, new[]{ "ItemId", "ItemSubCategory", "ItemImageName", "ItemFrame", "ItemType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.DeckItemLvUpItemTable), global::ReMastersLib.DeckItemLvUpItemTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DeckItemLvUpItem : pb::IMessage<DeckItemLvUpItem> {
    private static readonly pb::MessageParser<DeckItemLvUpItem> _parser = new pb::MessageParser<DeckItemLvUpItem>(() => new DeckItemLvUpItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckItemLvUpItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.DeckItemLvUpItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUpItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUpItem(DeckItemLvUpItem other) : this() {
      itemId_ = other.itemId_;
      itemSubCategory_ = other.itemSubCategory_;
      itemImageName_ = other.itemImageName_;
      itemFrame_ = other.itemFrame_;
      itemType_ = other.itemType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUpItem Clone() {
      return new DeckItemLvUpItem(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private long itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_subCategory" field.</summary>
    public const int ItemSubCategoryFieldNumber = 2;
    private int itemSubCategory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSubCategory {
      get { return itemSubCategory_; }
      set {
        itemSubCategory_ = value;
      }
    }

    /// <summary>Field number for the "item_image_name" field.</summary>
    public const int ItemImageNameFieldNumber = 3;
    private string itemImageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemImageName {
      get { return itemImageName_; }
      set {
        itemImageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "item_frame" field.</summary>
    public const int ItemFrameFieldNumber = 4;
    private int itemFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemFrame {
      get { return itemFrame_; }
      set {
        itemFrame_ = value;
      }
    }

    /// <summary>Field number for the "item_type" field.</summary>
    public const int ItemTypeFieldNumber = 5;
    private int itemType_;
    /// <summary>
    /// motif_type_name_en.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckItemLvUpItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckItemLvUpItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemSubCategory != other.ItemSubCategory) return false;
      if (ItemImageName != other.ItemImageName) return false;
      if (ItemFrame != other.ItemFrame) return false;
      if (ItemType != other.ItemType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0L) hash ^= ItemId.GetHashCode();
      if (ItemSubCategory != 0) hash ^= ItemSubCategory.GetHashCode();
      if (ItemImageName.Length != 0) hash ^= ItemImageName.GetHashCode();
      if (ItemFrame != 0) hash ^= ItemFrame.GetHashCode();
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ItemId);
      }
      if (ItemSubCategory != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemSubCategory);
      }
      if (ItemImageName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ItemImageName);
      }
      if (ItemFrame != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemFrame);
      }
      if (ItemType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItemType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemId);
      }
      if (ItemSubCategory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemSubCategory);
      }
      if (ItemImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemImageName);
      }
      if (ItemFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemFrame);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckItemLvUpItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0L) {
        ItemId = other.ItemId;
      }
      if (other.ItemSubCategory != 0) {
        ItemSubCategory = other.ItemSubCategory;
      }
      if (other.ItemImageName.Length != 0) {
        ItemImageName = other.ItemImageName;
      }
      if (other.ItemFrame != 0) {
        ItemFrame = other.ItemFrame;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt64();
            break;
          }
          case 16: {
            ItemSubCategory = input.ReadInt32();
            break;
          }
          case 26: {
            ItemImageName = input.ReadString();
            break;
          }
          case 32: {
            ItemFrame = input.ReadInt32();
            break;
          }
          case 40: {
            ItemType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeckItemLvUpItemTable : pb::IMessage<DeckItemLvUpItemTable> {
    private static readonly pb::MessageParser<DeckItemLvUpItemTable> _parser = new pb::MessageParser<DeckItemLvUpItemTable>(() => new DeckItemLvUpItemTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckItemLvUpItemTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.DeckItemLvUpItemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUpItemTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUpItemTable(DeckItemLvUpItemTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUpItemTable Clone() {
      return new DeckItemLvUpItemTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.DeckItemLvUpItem> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.DeckItemLvUpItem.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.DeckItemLvUpItem> entries_ = new pbc::RepeatedField<global::ReMastersLib.DeckItemLvUpItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.DeckItemLvUpItem> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckItemLvUpItemTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckItemLvUpItemTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckItemLvUpItemTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
