// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/Ability.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/Ability.proto</summary>
  public static partial class AbilityReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/Ability.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AbilityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90by9BYmlsaXR5LnByb3RvEgxSZU1hc3RlcnNMaWIiawoHQWJpbGl0",
            "eRISCgphYmlsaXR5X2lkGAEgASgDEgwKBHR5cGUYAiABKAUSEgoKcGFzc2l2",
            "ZV9pZBgDIAEoBRIPCgdtb3ZlX2lkGAQgASgFEg0KBXZhbHVlGAUgASgFEgoK",
            "AnU2GAYgASgFIjYKDEFiaWxpdHlUYWJsZRImCgdlbnRyaWVzGAEgAygLMhUu",
            "UmVNYXN0ZXJzTGliLkFiaWxpdHliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.Ability), global::ReMastersLib.Ability.Parser, new[]{ "AbilityId", "Type", "PassiveId", "MoveId", "Value", "U6" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.AbilityTable), global::ReMastersLib.AbilityTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Ability : pb::IMessage<Ability> {
    private static readonly pb::MessageParser<Ability> _parser = new pb::MessageParser<Ability>(() => new Ability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.AbilityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability(Ability other) : this() {
      abilityId_ = other.abilityId_;
      type_ = other.type_;
      passiveId_ = other.passiveId_;
      moveId_ = other.moveId_;
      value_ = other.value_;
      u6_ = other.u6_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability Clone() {
      return new Ability(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private long abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// ability_description_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "passive_id" field.</summary>
    public const int PassiveIdFieldNumber = 3;
    private int passiveId_;
    /// <summary>
    ///
    ///1 to 6: stat boosts
    ///7: passive
    ///8: additional move effect
    ///9: move power boost
    ///10: move accuracy boost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveId {
      get { return passiveId_; }
      set {
        passiveId_ = value;
      }
    }

    /// <summary>Field number for the "move_id" field.</summary>
    public const int MoveIdFieldNumber = 4;
    private int moveId_;
    /// <summary>
    /// Move.pb / move_name_xx.lsd / move_description_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveId {
      get { return moveId_; }
      set {
        moveId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 5;
    private int value_;
    /// <summary>
    /// stat boost given by the ability if applicable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "u6" field.</summary>
    public const int U6FieldNumber = 6;
    private int u6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U6 {
      get { return u6_; }
      set {
        u6_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (Type != other.Type) return false;
      if (PassiveId != other.PassiveId) return false;
      if (MoveId != other.MoveId) return false;
      if (Value != other.Value) return false;
      if (U6 != other.U6) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0L) hash ^= AbilityId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PassiveId != 0) hash ^= PassiveId.GetHashCode();
      if (MoveId != 0) hash ^= MoveId.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (U6 != 0) hash ^= U6.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AbilityId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (PassiveId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PassiveId);
      }
      if (MoveId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoveId);
      }
      if (Value != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Value);
      }
      if (U6 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(U6);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AbilityId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (PassiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveId);
      }
      if (MoveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (U6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U6);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ability other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0L) {
        AbilityId = other.AbilityId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PassiveId != 0) {
        PassiveId = other.PassiveId;
      }
      if (other.MoveId != 0) {
        MoveId = other.MoveId;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.U6 != 0) {
        U6 = other.U6;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            PassiveId = input.ReadInt32();
            break;
          }
          case 32: {
            MoveId = input.ReadInt32();
            break;
          }
          case 40: {
            Value = input.ReadInt32();
            break;
          }
          case 48: {
            U6 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AbilityTable : pb::IMessage<AbilityTable> {
    private static readonly pb::MessageParser<AbilityTable> _parser = new pb::MessageParser<AbilityTable>(() => new AbilityTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbilityTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.AbilityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityTable(AbilityTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityTable Clone() {
      return new AbilityTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.Ability> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.Ability.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.Ability> entries_ = new pbc::RepeatedField<global::ReMastersLib.Ability>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.Ability> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbilityTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbilityTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbilityTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
