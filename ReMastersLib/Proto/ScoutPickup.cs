// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/ScoutPickup.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/ScoutPickup.proto</summary>
  public static partial class ScoutPickupReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/ScoutPickup.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScoutPickupReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90by9TY291dFBpY2t1cC5wcm90bxIMUmVNYXN0ZXJzTGliIlYKC1Nj",
            "b3V0UGlja3VwEhAKCHNjb3V0X2lkGAEgASgJEhIKCnRyYWluZXJfaWQYAiAB",
            "KAMSDwoHdGV4dF9pZBgDIAEoCRIQCghwcmlvcml0eRgEIAEoBSI+ChBTY291",
            "dFBpY2t1cFRhYmxlEioKB2VudHJpZXMYASADKAsyGS5SZU1hc3RlcnNMaWIu",
            "U2NvdXRQaWNrdXBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.ScoutPickup), global::ReMastersLib.ScoutPickup.Parser, new[]{ "ScoutId", "TrainerId", "TextId", "Priority" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.ScoutPickupTable), global::ReMastersLib.ScoutPickupTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ScoutPickup : pb::IMessage<ScoutPickup> {
    private static readonly pb::MessageParser<ScoutPickup> _parser = new pb::MessageParser<ScoutPickup>(() => new ScoutPickup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoutPickup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.ScoutPickupReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutPickup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutPickup(ScoutPickup other) : this() {
      scoutId_ = other.scoutId_;
      trainerId_ = other.trainerId_;
      textId_ = other.textId_;
      priority_ = other.priority_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutPickup Clone() {
      return new ScoutPickup(this);
    }

    /// <summary>Field number for the "scout_id" field.</summary>
    public const int ScoutIdFieldNumber = 1;
    private string scoutId_ = "";
    /// <summary>
    /// Scout.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScoutId {
      get { return scoutId_; }
      set {
        scoutId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trainer_id" field.</summary>
    public const int TrainerIdFieldNumber = 2;
    private long trainerId_;
    /// <summary>
    /// Trainer.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TrainerId {
      get { return trainerId_; }
      set {
        trainerId_ = value;
      }
    }

    /// <summary>Field number for the "text_id" field.</summary>
    public const int TextIdFieldNumber = 3;
    private string textId_ = "";
    /// <summary>
    /// lottery_pickup_description_xx.lsd / scout_pickup_description_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextId {
      get { return textId_; }
      set {
        textId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 4;
    private int priority_;
    /// <summary>
    /// from 10 to lower values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoutPickup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoutPickup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScoutId != other.ScoutId) return false;
      if (TrainerId != other.TrainerId) return false;
      if (TextId != other.TextId) return false;
      if (Priority != other.Priority) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScoutId.Length != 0) hash ^= ScoutId.GetHashCode();
      if (TrainerId != 0L) hash ^= TrainerId.GetHashCode();
      if (TextId.Length != 0) hash ^= TextId.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScoutId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScoutId);
      }
      if (TrainerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TrainerId);
      }
      if (TextId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TextId);
      }
      if (Priority != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Priority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScoutId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScoutId);
      }
      if (TrainerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TrainerId);
      }
      if (TextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextId);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoutPickup other) {
      if (other == null) {
        return;
      }
      if (other.ScoutId.Length != 0) {
        ScoutId = other.ScoutId;
      }
      if (other.TrainerId != 0L) {
        TrainerId = other.TrainerId;
      }
      if (other.TextId.Length != 0) {
        TextId = other.TextId;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ScoutId = input.ReadString();
            break;
          }
          case 16: {
            TrainerId = input.ReadInt64();
            break;
          }
          case 26: {
            TextId = input.ReadString();
            break;
          }
          case 32: {
            Priority = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoutPickupTable : pb::IMessage<ScoutPickupTable> {
    private static readonly pb::MessageParser<ScoutPickupTable> _parser = new pb::MessageParser<ScoutPickupTable>(() => new ScoutPickupTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoutPickupTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.ScoutPickupReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutPickupTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutPickupTable(ScoutPickupTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutPickupTable Clone() {
      return new ScoutPickupTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.ScoutPickup> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.ScoutPickup.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.ScoutPickup> entries_ = new pbc::RepeatedField<global::ReMastersLib.ScoutPickup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.ScoutPickup> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoutPickupTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoutPickupTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoutPickupTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
