// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/ScoutEp.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/ScoutEp.proto</summary>
  public static partial class ScoutEpReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/ScoutEp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScoutEpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90by9TY291dEVwLnByb3RvEgxSZU1hc3RlcnNMaWIipgEKB1Njb3V0",
            "RXASEwoLc2NvdXRfZXBfaWQYASABKAkSEAoIc2NvdXRfaWQYAiABKAkSCgoC",
            "dTMYAyABKAUSDwoHdGV4dF9pZBgEIAEoCRIQCghnZW1fdHlwZRgFIAEoBRIM",
            "CgRjb3N0GAYgASgFEhYKDnNjb3V0X3F1YW50aXR5GAcgASgFEgoKAnU4GAgg",
            "ASgFEhMKC2l0ZW1fc2V0X2lkGAkgASgDIjYKDFNjb3V0RXBUYWJsZRImCgdl",
            "bnRyaWVzGAEgAygLMhUuUmVNYXN0ZXJzTGliLlNjb3V0RXBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.ScoutEp), global::ReMastersLib.ScoutEp.Parser, new[]{ "ScoutEpId", "ScoutId", "U3", "TextId", "GemType", "Cost", "ScoutQuantity", "U8", "ItemSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.ScoutEpTable), global::ReMastersLib.ScoutEpTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ScoutEp : pb::IMessage<ScoutEp> {
    private static readonly pb::MessageParser<ScoutEp> _parser = new pb::MessageParser<ScoutEp>(() => new ScoutEp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoutEp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.ScoutEpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutEp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutEp(ScoutEp other) : this() {
      scoutEpId_ = other.scoutEpId_;
      scoutId_ = other.scoutId_;
      u3_ = other.u3_;
      textId_ = other.textId_;
      gemType_ = other.gemType_;
      cost_ = other.cost_;
      scoutQuantity_ = other.scoutQuantity_;
      u8_ = other.u8_;
      itemSetId_ = other.itemSetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutEp Clone() {
      return new ScoutEp(this);
    }

    /// <summary>Field number for the "scout_ep_id" field.</summary>
    public const int ScoutEpIdFieldNumber = 1;
    private string scoutEpId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScoutEpId {
      get { return scoutEpId_; }
      set {
        scoutEpId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scout_id" field.</summary>
    public const int ScoutIdFieldNumber = 2;
    private string scoutId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScoutId {
      get { return scoutId_; }
      set {
        scoutId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "u3" field.</summary>
    public const int U3FieldNumber = 3;
    private int u3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U3 {
      get { return u3_; }
      set {
        u3_ = value;
      }
    }

    /// <summary>Field number for the "text_id" field.</summary>
    public const int TextIdFieldNumber = 4;
    private string textId_ = "";
    /// <summary>
    /// shop_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextId {
      get { return textId_; }
      set {
        textId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gem_type" field.</summary>
    public const int GemTypeFieldNumber = 5;
    private int gemType_;
    /// <summary>
    /// 1: Non paid, 2: Paid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemType {
      get { return gemType_; }
      set {
        gemType_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 6;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "scout_quantity" field.</summary>
    public const int ScoutQuantityFieldNumber = 7;
    private int scoutQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoutQuantity {
      get { return scoutQuantity_; }
      set {
        scoutQuantity_ = value;
      }
    }

    /// <summary>Field number for the "u8" field.</summary>
    public const int U8FieldNumber = 8;
    private int u8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U8 {
      get { return u8_; }
      set {
        u8_ = value;
      }
    }

    /// <summary>Field number for the "item_set_id" field.</summary>
    public const int ItemSetIdFieldNumber = 9;
    private long itemSetId_;
    /// <summary>
    /// ItemSet.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemSetId {
      get { return itemSetId_; }
      set {
        itemSetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoutEp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoutEp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScoutEpId != other.ScoutEpId) return false;
      if (ScoutId != other.ScoutId) return false;
      if (U3 != other.U3) return false;
      if (TextId != other.TextId) return false;
      if (GemType != other.GemType) return false;
      if (Cost != other.Cost) return false;
      if (ScoutQuantity != other.ScoutQuantity) return false;
      if (U8 != other.U8) return false;
      if (ItemSetId != other.ItemSetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScoutEpId.Length != 0) hash ^= ScoutEpId.GetHashCode();
      if (ScoutId.Length != 0) hash ^= ScoutId.GetHashCode();
      if (U3 != 0) hash ^= U3.GetHashCode();
      if (TextId.Length != 0) hash ^= TextId.GetHashCode();
      if (GemType != 0) hash ^= GemType.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (ScoutQuantity != 0) hash ^= ScoutQuantity.GetHashCode();
      if (U8 != 0) hash ^= U8.GetHashCode();
      if (ItemSetId != 0L) hash ^= ItemSetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScoutEpId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScoutEpId);
      }
      if (ScoutId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ScoutId);
      }
      if (U3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(U3);
      }
      if (TextId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TextId);
      }
      if (GemType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GemType);
      }
      if (Cost != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (ScoutQuantity != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ScoutQuantity);
      }
      if (U8 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(U8);
      }
      if (ItemSetId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(ItemSetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScoutEpId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScoutEpId);
      }
      if (ScoutId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScoutId);
      }
      if (U3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U3);
      }
      if (TextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextId);
      }
      if (GemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GemType);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (ScoutQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoutQuantity);
      }
      if (U8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U8);
      }
      if (ItemSetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemSetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoutEp other) {
      if (other == null) {
        return;
      }
      if (other.ScoutEpId.Length != 0) {
        ScoutEpId = other.ScoutEpId;
      }
      if (other.ScoutId.Length != 0) {
        ScoutId = other.ScoutId;
      }
      if (other.U3 != 0) {
        U3 = other.U3;
      }
      if (other.TextId.Length != 0) {
        TextId = other.TextId;
      }
      if (other.GemType != 0) {
        GemType = other.GemType;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.ScoutQuantity != 0) {
        ScoutQuantity = other.ScoutQuantity;
      }
      if (other.U8 != 0) {
        U8 = other.U8;
      }
      if (other.ItemSetId != 0L) {
        ItemSetId = other.ItemSetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ScoutEpId = input.ReadString();
            break;
          }
          case 18: {
            ScoutId = input.ReadString();
            break;
          }
          case 24: {
            U3 = input.ReadInt32();
            break;
          }
          case 34: {
            TextId = input.ReadString();
            break;
          }
          case 40: {
            GemType = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            ScoutQuantity = input.ReadInt32();
            break;
          }
          case 64: {
            U8 = input.ReadInt32();
            break;
          }
          case 72: {
            ItemSetId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoutEpTable : pb::IMessage<ScoutEpTable> {
    private static readonly pb::MessageParser<ScoutEpTable> _parser = new pb::MessageParser<ScoutEpTable>(() => new ScoutEpTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoutEpTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.ScoutEpReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutEpTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutEpTable(ScoutEpTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutEpTable Clone() {
      return new ScoutEpTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.ScoutEp> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.ScoutEp.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.ScoutEp> entries_ = new pbc::RepeatedField<global::ReMastersLib.ScoutEp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.ScoutEp> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoutEpTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoutEpTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoutEpTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
