// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/Trainer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/Trainer.proto</summary>
  public static partial class TrainerReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/Trainer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrainerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90by9UcmFpbmVyLnByb3RvEgxSZU1hc3RlcnNMaWIioQMKB1RyYWlu",
            "ZXISEgoKdHJhaW5lcl9pZBgBIAEoBBIKCgJ1MhgCIAEoBRIUCgxzY291dF9t",
            "ZXRob2QYAyABKAUSFwoPdHJhaW5lcl9iYXNlX2lkGAQgASgFEgwKBHR5cGUY",
            "BSABKAUSDgoGcmFyaXR5GAYgASgFEgwKBHJvbGUYByABKAUSEgoKbW9uc3Rl",
            "cl9pZBgIIAEoBBIRCgltb3ZlXzFfaWQYCSABKAUSEQoJbW92ZV8yX2lkGAog",
            "ASgFEhEKCW1vdmVfM19pZBgLIAEoBRIRCgltb3ZlXzRfaWQYDCABKAUSEQoJ",
            "d2Vha190eXBlGA0gASgFEgsKA3UxNBgOIAEoBRILCgN1MTUYDyABKAUSFAoM",
            "cGFzc2l2ZV8xX2lkGBAgASgFEhQKDHBhc3NpdmVfMl9pZBgRIAEoBRIUCgxw",
            "YXNzaXZlXzNfaWQYEiABKAUSFAoMcGFzc2l2ZV80X2lkGBMgASgFEhQKDHBh",
            "c3NpdmVfNV9pZBgUIAEoBRILCgN1MjEYFSABKAkSEwoLc2NoZWR1bGVfaWQY",
            "FiABKAkiNgoMVHJhaW5lclRhYmxlEiYKB2VudHJpZXMYASADKAsyFS5SZU1h",
            "c3RlcnNMaWIuVHJhaW5lcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.Trainer), global::ReMastersLib.Trainer.Parser, new[]{ "TrainerId", "U2", "ScoutMethod", "TrainerBaseId", "Type", "Rarity", "Role", "MonsterId", "Move1Id", "Move2Id", "Move3Id", "Move4Id", "WeakType", "U14", "U15", "Passive1Id", "Passive2Id", "Passive3Id", "Passive4Id", "Passive5Id", "U21", "ScheduleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.TrainerTable), global::ReMastersLib.TrainerTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Trainer : pb::IMessage<Trainer> {
    private static readonly pb::MessageParser<Trainer> _parser = new pb::MessageParser<Trainer>(() => new Trainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.TrainerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trainer(Trainer other) : this() {
      trainerId_ = other.trainerId_;
      u2_ = other.u2_;
      scoutMethod_ = other.scoutMethod_;
      trainerBaseId_ = other.trainerBaseId_;
      type_ = other.type_;
      rarity_ = other.rarity_;
      role_ = other.role_;
      monsterId_ = other.monsterId_;
      move1Id_ = other.move1Id_;
      move2Id_ = other.move2Id_;
      move3Id_ = other.move3Id_;
      move4Id_ = other.move4Id_;
      weakType_ = other.weakType_;
      u14_ = other.u14_;
      u15_ = other.u15_;
      passive1Id_ = other.passive1Id_;
      passive2Id_ = other.passive2Id_;
      passive3Id_ = other.passive3Id_;
      passive4Id_ = other.passive4Id_;
      passive5Id_ = other.passive5Id_;
      u21_ = other.u21_;
      scheduleId_ = other.scheduleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trainer Clone() {
      return new Trainer(this);
    }

    /// <summary>Field number for the "trainer_id" field.</summary>
    public const int TrainerIdFieldNumber = 1;
    private ulong trainerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TrainerId {
      get { return trainerId_; }
      set {
        trainerId_ = value;
      }
    }

    /// <summary>Field number for the "u2" field.</summary>
    public const int U2FieldNumber = 2;
    private int u2_;
    /// <summary>
    /// 1 for the mc, 2 otherwise
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U2 {
      get { return u2_; }
      set {
        u2_ = value;
      }
    }

    /// <summary>Field number for the "scout_method" field.</summary>
    public const int ScoutMethodFieldNumber = 3;
    private int scoutMethod_;
    /// <summary>
    /// 1 for gacha, 2 for story
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoutMethod {
      get { return scoutMethod_; }
      set {
        scoutMethod_ = value;
      }
    }

    /// <summary>Field number for the "trainer_base_id" field.</summary>
    public const int TrainerBaseIdFieldNumber = 4;
    private int trainerBaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrainerBaseId {
      get { return trainerBaseId_; }
      set {
        trainerBaseId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    /// <summary>
    /// motif_type_name_en.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 6;
    private int rarity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rarity {
      get { return rarity_; }
      set {
        rarity_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 7;
    private int role_;
    /// <summary>
    /// role_type_name_en.lsd (0 = Phy Strike)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "monster_id" field.</summary>
    public const int MonsterIdFieldNumber = 8;
    private ulong monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "move_1_id" field.</summary>
    public const int Move1IdFieldNumber = 9;
    private int move1Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Move1Id {
      get { return move1Id_; }
      set {
        move1Id_ = value;
      }
    }

    /// <summary>Field number for the "move_2_id" field.</summary>
    public const int Move2IdFieldNumber = 10;
    private int move2Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Move2Id {
      get { return move2Id_; }
      set {
        move2Id_ = value;
      }
    }

    /// <summary>Field number for the "move_3_id" field.</summary>
    public const int Move3IdFieldNumber = 11;
    private int move3Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Move3Id {
      get { return move3Id_; }
      set {
        move3Id_ = value;
      }
    }

    /// <summary>Field number for the "move_4_id" field.</summary>
    public const int Move4IdFieldNumber = 12;
    private int move4Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Move4Id {
      get { return move4Id_; }
      set {
        move4Id_ = value;
      }
    }

    /// <summary>Field number for the "weak_type" field.</summary>
    public const int WeakTypeFieldNumber = 13;
    private int weakType_;
    /// <summary>
    /// motif_type_name_en.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeakType {
      get { return weakType_; }
      set {
        weakType_ = value;
      }
    }

    /// <summary>Field number for the "u14" field.</summary>
    public const int U14FieldNumber = 14;
    private int u14_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U14 {
      get { return u14_; }
      set {
        u14_ = value;
      }
    }

    /// <summary>Field number for the "u15" field.</summary>
    public const int U15FieldNumber = 15;
    private int u15_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U15 {
      get { return u15_; }
      set {
        u15_ = value;
      }
    }

    /// <summary>Field number for the "passive_1_id" field.</summary>
    public const int Passive1IdFieldNumber = 16;
    private int passive1Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passive1Id {
      get { return passive1Id_; }
      set {
        passive1Id_ = value;
      }
    }

    /// <summary>Field number for the "passive_2_id" field.</summary>
    public const int Passive2IdFieldNumber = 17;
    private int passive2Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passive2Id {
      get { return passive2Id_; }
      set {
        passive2Id_ = value;
      }
    }

    /// <summary>Field number for the "passive_3_id" field.</summary>
    public const int Passive3IdFieldNumber = 18;
    private int passive3Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passive3Id {
      get { return passive3Id_; }
      set {
        passive3Id_ = value;
      }
    }

    /// <summary>Field number for the "passive_4_id" field.</summary>
    public const int Passive4IdFieldNumber = 19;
    private int passive4Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passive4Id {
      get { return passive4Id_; }
      set {
        passive4Id_ = value;
      }
    }

    /// <summary>Field number for the "passive_5_id" field.</summary>
    public const int Passive5IdFieldNumber = 20;
    private int passive5Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passive5Id {
      get { return passive5Id_; }
      set {
        passive5Id_ = value;
      }
    }

    /// <summary>Field number for the "u21" field.</summary>
    public const int U21FieldNumber = 21;
    private string u21_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string U21 {
      get { return u21_; }
      set {
        u21_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schedule_id" field.</summary>
    public const int ScheduleIdFieldNumber = 22;
    private string scheduleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScheduleId {
      get { return scheduleId_; }
      set {
        scheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrainerId != other.TrainerId) return false;
      if (U2 != other.U2) return false;
      if (ScoutMethod != other.ScoutMethod) return false;
      if (TrainerBaseId != other.TrainerBaseId) return false;
      if (Type != other.Type) return false;
      if (Rarity != other.Rarity) return false;
      if (Role != other.Role) return false;
      if (MonsterId != other.MonsterId) return false;
      if (Move1Id != other.Move1Id) return false;
      if (Move2Id != other.Move2Id) return false;
      if (Move3Id != other.Move3Id) return false;
      if (Move4Id != other.Move4Id) return false;
      if (WeakType != other.WeakType) return false;
      if (U14 != other.U14) return false;
      if (U15 != other.U15) return false;
      if (Passive1Id != other.Passive1Id) return false;
      if (Passive2Id != other.Passive2Id) return false;
      if (Passive3Id != other.Passive3Id) return false;
      if (Passive4Id != other.Passive4Id) return false;
      if (Passive5Id != other.Passive5Id) return false;
      if (U21 != other.U21) return false;
      if (ScheduleId != other.ScheduleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TrainerId != 0UL) hash ^= TrainerId.GetHashCode();
      if (U2 != 0) hash ^= U2.GetHashCode();
      if (ScoutMethod != 0) hash ^= ScoutMethod.GetHashCode();
      if (TrainerBaseId != 0) hash ^= TrainerBaseId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Rarity != 0) hash ^= Rarity.GetHashCode();
      if (Role != 0) hash ^= Role.GetHashCode();
      if (MonsterId != 0UL) hash ^= MonsterId.GetHashCode();
      if (Move1Id != 0) hash ^= Move1Id.GetHashCode();
      if (Move2Id != 0) hash ^= Move2Id.GetHashCode();
      if (Move3Id != 0) hash ^= Move3Id.GetHashCode();
      if (Move4Id != 0) hash ^= Move4Id.GetHashCode();
      if (WeakType != 0) hash ^= WeakType.GetHashCode();
      if (U14 != 0) hash ^= U14.GetHashCode();
      if (U15 != 0) hash ^= U15.GetHashCode();
      if (Passive1Id != 0) hash ^= Passive1Id.GetHashCode();
      if (Passive2Id != 0) hash ^= Passive2Id.GetHashCode();
      if (Passive3Id != 0) hash ^= Passive3Id.GetHashCode();
      if (Passive4Id != 0) hash ^= Passive4Id.GetHashCode();
      if (Passive5Id != 0) hash ^= Passive5Id.GetHashCode();
      if (U21.Length != 0) hash ^= U21.GetHashCode();
      if (ScheduleId.Length != 0) hash ^= ScheduleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrainerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TrainerId);
      }
      if (U2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(U2);
      }
      if (ScoutMethod != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ScoutMethod);
      }
      if (TrainerBaseId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TrainerBaseId);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (Rarity != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rarity);
      }
      if (Role != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Role);
      }
      if (MonsterId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(MonsterId);
      }
      if (Move1Id != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Move1Id);
      }
      if (Move2Id != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Move2Id);
      }
      if (Move3Id != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Move3Id);
      }
      if (Move4Id != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Move4Id);
      }
      if (WeakType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(WeakType);
      }
      if (U14 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(U14);
      }
      if (U15 != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(U15);
      }
      if (Passive1Id != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Passive1Id);
      }
      if (Passive2Id != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Passive2Id);
      }
      if (Passive3Id != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Passive3Id);
      }
      if (Passive4Id != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Passive4Id);
      }
      if (Passive5Id != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Passive5Id);
      }
      if (U21.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(U21);
      }
      if (ScheduleId.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(ScheduleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrainerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TrainerId);
      }
      if (U2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U2);
      }
      if (ScoutMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoutMethod);
      }
      if (TrainerBaseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainerBaseId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Rarity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rarity);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Role);
      }
      if (MonsterId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MonsterId);
      }
      if (Move1Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move1Id);
      }
      if (Move2Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move2Id);
      }
      if (Move3Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move3Id);
      }
      if (Move4Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move4Id);
      }
      if (WeakType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeakType);
      }
      if (U14 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U14);
      }
      if (U15 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U15);
      }
      if (Passive1Id != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Passive1Id);
      }
      if (Passive2Id != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Passive2Id);
      }
      if (Passive3Id != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Passive3Id);
      }
      if (Passive4Id != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Passive4Id);
      }
      if (Passive5Id != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Passive5Id);
      }
      if (U21.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(U21);
      }
      if (ScheduleId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScheduleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trainer other) {
      if (other == null) {
        return;
      }
      if (other.TrainerId != 0UL) {
        TrainerId = other.TrainerId;
      }
      if (other.U2 != 0) {
        U2 = other.U2;
      }
      if (other.ScoutMethod != 0) {
        ScoutMethod = other.ScoutMethod;
      }
      if (other.TrainerBaseId != 0) {
        TrainerBaseId = other.TrainerBaseId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Rarity != 0) {
        Rarity = other.Rarity;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.MonsterId != 0UL) {
        MonsterId = other.MonsterId;
      }
      if (other.Move1Id != 0) {
        Move1Id = other.Move1Id;
      }
      if (other.Move2Id != 0) {
        Move2Id = other.Move2Id;
      }
      if (other.Move3Id != 0) {
        Move3Id = other.Move3Id;
      }
      if (other.Move4Id != 0) {
        Move4Id = other.Move4Id;
      }
      if (other.WeakType != 0) {
        WeakType = other.WeakType;
      }
      if (other.U14 != 0) {
        U14 = other.U14;
      }
      if (other.U15 != 0) {
        U15 = other.U15;
      }
      if (other.Passive1Id != 0) {
        Passive1Id = other.Passive1Id;
      }
      if (other.Passive2Id != 0) {
        Passive2Id = other.Passive2Id;
      }
      if (other.Passive3Id != 0) {
        Passive3Id = other.Passive3Id;
      }
      if (other.Passive4Id != 0) {
        Passive4Id = other.Passive4Id;
      }
      if (other.Passive5Id != 0) {
        Passive5Id = other.Passive5Id;
      }
      if (other.U21.Length != 0) {
        U21 = other.U21;
      }
      if (other.ScheduleId.Length != 0) {
        ScheduleId = other.ScheduleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrainerId = input.ReadUInt64();
            break;
          }
          case 16: {
            U2 = input.ReadInt32();
            break;
          }
          case 24: {
            ScoutMethod = input.ReadInt32();
            break;
          }
          case 32: {
            TrainerBaseId = input.ReadInt32();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            Rarity = input.ReadInt32();
            break;
          }
          case 56: {
            Role = input.ReadInt32();
            break;
          }
          case 64: {
            MonsterId = input.ReadUInt64();
            break;
          }
          case 72: {
            Move1Id = input.ReadInt32();
            break;
          }
          case 80: {
            Move2Id = input.ReadInt32();
            break;
          }
          case 88: {
            Move3Id = input.ReadInt32();
            break;
          }
          case 96: {
            Move4Id = input.ReadInt32();
            break;
          }
          case 104: {
            WeakType = input.ReadInt32();
            break;
          }
          case 112: {
            U14 = input.ReadInt32();
            break;
          }
          case 120: {
            U15 = input.ReadInt32();
            break;
          }
          case 128: {
            Passive1Id = input.ReadInt32();
            break;
          }
          case 136: {
            Passive2Id = input.ReadInt32();
            break;
          }
          case 144: {
            Passive3Id = input.ReadInt32();
            break;
          }
          case 152: {
            Passive4Id = input.ReadInt32();
            break;
          }
          case 160: {
            Passive5Id = input.ReadInt32();
            break;
          }
          case 170: {
            U21 = input.ReadString();
            break;
          }
          case 178: {
            ScheduleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrainerTable : pb::IMessage<TrainerTable> {
    private static readonly pb::MessageParser<TrainerTable> _parser = new pb::MessageParser<TrainerTable>(() => new TrainerTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainerTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.TrainerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainerTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainerTable(TrainerTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainerTable Clone() {
      return new TrainerTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.Trainer> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.Trainer.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.Trainer> entries_ = new pbc::RepeatedField<global::ReMastersLib.Trainer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.Trainer> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainerTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainerTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainerTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
