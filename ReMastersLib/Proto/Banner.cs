// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/Banner.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/Banner.proto</summary>
  public static partial class BannerReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/Banner.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BannerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90by9CYW5uZXIucHJvdG8SDFJlTWFzdGVyc0xpYiJpCgZCYW5uZXIS",
            "EQoJYmFubmVyX2lkGAEgASgNEhgKEGJhbm5lcl9pZF9zdHJpbmcYAiABKAkS",
            "EQoJdGV4dF8xX2lkGAMgASgFEhEKCXRleHRfMl9pZBgEIAEoBRIMCgR0eXBl",
            "GAUgASgNIjQKC0Jhbm5lclRhYmxlEiUKB2VudHJpZXMYASADKAsyFC5SZU1h",
            "c3RlcnNMaWIuQmFubmVyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.Banner), global::ReMastersLib.Banner.Parser, new[]{ "BannerId", "BannerIdString", "Text1Id", "Text2Id", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.BannerTable), global::ReMastersLib.BannerTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Banner : pb::IMessage<Banner> {
    private static readonly pb::MessageParser<Banner> _parser = new pb::MessageParser<Banner>(() => new Banner());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Banner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.BannerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Banner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Banner(Banner other) : this() {
      bannerId_ = other.bannerId_;
      bannerIdString_ = other.bannerIdString_;
      text1Id_ = other.text1Id_;
      text2Id_ = other.text2Id_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Banner Clone() {
      return new Banner(this);
    }

    /// <summary>Field number for the "banner_id" field.</summary>
    public const int BannerIdFieldNumber = 1;
    private uint bannerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BannerId {
      get { return bannerId_; }
      set {
        bannerId_ = value;
      }
    }

    /// <summary>Field number for the "banner_id_string" field.</summary>
    public const int BannerIdStringFieldNumber = 2;
    private string bannerIdString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BannerIdString {
      get { return bannerIdString_; }
      set {
        bannerIdString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text_1_id" field.</summary>
    public const int Text1IdFieldNumber = 3;
    private int text1Id_;
    /// <summary>
    /// banner_text_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Text1Id {
      get { return text1Id_; }
      set {
        text1Id_ = value;
      }
    }

    /// <summary>Field number for the "text_2_id" field.</summary>
    public const int Text2IdFieldNumber = 4;
    private int text2Id_;
    /// <summary>
    /// banner_text_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Text2Id {
      get { return text2Id_; }
      set {
        text2Id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private uint type_;
    /// <summary>
    ///
    ///1 = Type Training Event
    ///2 = Story Event
    ///5 = Rally / Login Bonus
    ///7 = Regular Scout / Gem Special
    ///8 = Pok√© Fair Scout
    ///10 = Legendary Event
    ///11 = Weekly Bingo
    ///12 = Bingo (Difficulty unset)
    ///13 = Normal Bingo
    ///14 = Hard Bingo
    ///15 = Very Hard Bingo
    ///16 = Expert Bingo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Banner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Banner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BannerId != other.BannerId) return false;
      if (BannerIdString != other.BannerIdString) return false;
      if (Text1Id != other.Text1Id) return false;
      if (Text2Id != other.Text2Id) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BannerId != 0) hash ^= BannerId.GetHashCode();
      if (BannerIdString.Length != 0) hash ^= BannerIdString.GetHashCode();
      if (Text1Id != 0) hash ^= Text1Id.GetHashCode();
      if (Text2Id != 0) hash ^= Text2Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BannerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BannerId);
      }
      if (BannerIdString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BannerIdString);
      }
      if (Text1Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Text1Id);
      }
      if (Text2Id != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Text2Id);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BannerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BannerId);
      }
      if (BannerIdString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BannerIdString);
      }
      if (Text1Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Text1Id);
      }
      if (Text2Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Text2Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Banner other) {
      if (other == null) {
        return;
      }
      if (other.BannerId != 0) {
        BannerId = other.BannerId;
      }
      if (other.BannerIdString.Length != 0) {
        BannerIdString = other.BannerIdString;
      }
      if (other.Text1Id != 0) {
        Text1Id = other.Text1Id;
      }
      if (other.Text2Id != 0) {
        Text2Id = other.Text2Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BannerId = input.ReadUInt32();
            break;
          }
          case 18: {
            BannerIdString = input.ReadString();
            break;
          }
          case 24: {
            Text1Id = input.ReadInt32();
            break;
          }
          case 32: {
            Text2Id = input.ReadInt32();
            break;
          }
          case 40: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BannerTable : pb::IMessage<BannerTable> {
    private static readonly pb::MessageParser<BannerTable> _parser = new pb::MessageParser<BannerTable>(() => new BannerTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BannerTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.BannerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BannerTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BannerTable(BannerTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BannerTable Clone() {
      return new BannerTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.Banner> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.Banner.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.Banner> entries_ = new pbc::RepeatedField<global::ReMastersLib.Banner>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.Banner> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BannerTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BannerTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BannerTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
