// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/DeckItem.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/DeckItem.proto</summary>
  public static partial class DeckItemReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/DeckItem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeckItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90by9EZWNrSXRlbS5wcm90bxIMUmVNYXN0ZXJzTGliIswBCghEZWNr",
            "SXRlbRIPCgdpdGVtX2lkGAEgASgEEhcKD2l0ZW1fc3VidHlwZV9pZBgCIAEo",
            "BRIQCghpbWFnZV9pZBgDIAEoCRI0Cg5lcXVpcG1lbnRfdHlwZRgEIAEoDjIc",
            "LlJlTWFzdGVyc0xpYi5FcXVpcG1lbnRUeXBlcxIKCgJ1NRgFIAEoBRIMCgRU",
            "eXBlGAYgASgFEg4KBnJhcml0eRgHIAEoBRIYChBkZWNrSXRlbVBhcmFtX2lk",
            "GAggASgFEgoKAnU5GAkgASgFIjgKDURlY2tJdGVtVGFibGUSJwoHZW50cmll",
            "cxgBIAMoCzIWLlJlTWFzdGVyc0xpYi5EZWNrSXRlbSo/Cg5FcXVpcG1lbnRU",
            "eXBlcxIJCgVPdGhlchAAEgwKCEJyYWNlbGV0EAESCwoHQmFuZGFuYRACEgcK",
            "A1BpbhADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ReMastersLib.EquipmentTypes), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.DeckItem), global::ReMastersLib.DeckItem.Parser, new[]{ "ItemId", "ItemSubtypeId", "ImageId", "EquipmentType", "U5", "Type", "Rarity", "DeckItemParamId", "U9" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.DeckItemTable), global::ReMastersLib.DeckItemTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EquipmentTypes {
    [pbr::OriginalName("Other")] Other = 0,
    [pbr::OriginalName("Bracelet")] Bracelet = 1,
    [pbr::OriginalName("Bandana")] Bandana = 2,
    [pbr::OriginalName("Pin")] Pin = 3,
  }

  #endregion

  #region Messages
  public sealed partial class DeckItem : pb::IMessage<DeckItem> {
    private static readonly pb::MessageParser<DeckItem> _parser = new pb::MessageParser<DeckItem>(() => new DeckItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.DeckItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItem(DeckItem other) : this() {
      itemId_ = other.itemId_;
      itemSubtypeId_ = other.itemSubtypeId_;
      imageId_ = other.imageId_;
      equipmentType_ = other.equipmentType_;
      u5_ = other.u5_;
      type_ = other.type_;
      rarity_ = other.rarity_;
      deckItemParamId_ = other.deckItemParamId_;
      u9_ = other.u9_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItem Clone() {
      return new DeckItem(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private ulong itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_subtype_id" field.</summary>
    public const int ItemSubtypeIdFieldNumber = 2;
    private int itemSubtypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSubtypeId {
      get { return itemSubtypeId_; }
      set {
        itemSubtypeId_ = value;
      }
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 3;
    private string imageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equipment_type" field.</summary>
    public const int EquipmentTypeFieldNumber = 4;
    private global::ReMastersLib.EquipmentTypes equipmentType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ReMastersLib.EquipmentTypes EquipmentType {
      get { return equipmentType_; }
      set {
        equipmentType_ = value;
      }
    }

    /// <summary>Field number for the "u5" field.</summary>
    public const int U5FieldNumber = 5;
    private int u5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U5 {
      get { return u5_; }
      set {
        u5_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 7;
    private int rarity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rarity {
      get { return rarity_; }
      set {
        rarity_ = value;
      }
    }

    /// <summary>Field number for the "deckItemParam_id" field.</summary>
    public const int DeckItemParamIdFieldNumber = 8;
    private int deckItemParamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeckItemParamId {
      get { return deckItemParamId_; }
      set {
        deckItemParamId_ = value;
      }
    }

    /// <summary>Field number for the "u9" field.</summary>
    public const int U9FieldNumber = 9;
    private int u9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U9 {
      get { return u9_; }
      set {
        u9_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemSubtypeId != other.ItemSubtypeId) return false;
      if (ImageId != other.ImageId) return false;
      if (EquipmentType != other.EquipmentType) return false;
      if (U5 != other.U5) return false;
      if (Type != other.Type) return false;
      if (Rarity != other.Rarity) return false;
      if (DeckItemParamId != other.DeckItemParamId) return false;
      if (U9 != other.U9) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0UL) hash ^= ItemId.GetHashCode();
      if (ItemSubtypeId != 0) hash ^= ItemSubtypeId.GetHashCode();
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (EquipmentType != 0) hash ^= EquipmentType.GetHashCode();
      if (U5 != 0) hash ^= U5.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Rarity != 0) hash ^= Rarity.GetHashCode();
      if (DeckItemParamId != 0) hash ^= DeckItemParamId.GetHashCode();
      if (U9 != 0) hash ^= U9.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemId);
      }
      if (ItemSubtypeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemSubtypeId);
      }
      if (ImageId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageId);
      }
      if (EquipmentType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EquipmentType);
      }
      if (U5 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(U5);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (Rarity != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Rarity);
      }
      if (DeckItemParamId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DeckItemParamId);
      }
      if (U9 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(U9);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
      }
      if (ItemSubtypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemSubtypeId);
      }
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (EquipmentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EquipmentType);
      }
      if (U5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U5);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Rarity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rarity);
      }
      if (DeckItemParamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeckItemParamId);
      }
      if (U9 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U9);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0UL) {
        ItemId = other.ItemId;
      }
      if (other.ItemSubtypeId != 0) {
        ItemSubtypeId = other.ItemSubtypeId;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      if (other.EquipmentType != 0) {
        EquipmentType = other.EquipmentType;
      }
      if (other.U5 != 0) {
        U5 = other.U5;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Rarity != 0) {
        Rarity = other.Rarity;
      }
      if (other.DeckItemParamId != 0) {
        DeckItemParamId = other.DeckItemParamId;
      }
      if (other.U9 != 0) {
        U9 = other.U9;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemSubtypeId = input.ReadInt32();
            break;
          }
          case 26: {
            ImageId = input.ReadString();
            break;
          }
          case 32: {
            equipmentType_ = (global::ReMastersLib.EquipmentTypes) input.ReadEnum();
            break;
          }
          case 40: {
            U5 = input.ReadInt32();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
          case 56: {
            Rarity = input.ReadInt32();
            break;
          }
          case 64: {
            DeckItemParamId = input.ReadInt32();
            break;
          }
          case 72: {
            U9 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeckItemTable : pb::IMessage<DeckItemTable> {
    private static readonly pb::MessageParser<DeckItemTable> _parser = new pb::MessageParser<DeckItemTable>(() => new DeckItemTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckItemTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.DeckItemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemTable(DeckItemTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemTable Clone() {
      return new DeckItemTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.DeckItem> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.DeckItem.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.DeckItem> entries_ = new pbc::RepeatedField<global::ReMastersLib.DeckItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.DeckItem> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckItemTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckItemTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckItemTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
