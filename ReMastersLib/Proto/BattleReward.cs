// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/BattleReward.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/BattleReward.proto</summary>
  public static partial class BattleRewardReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/BattleReward.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleRewardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9CYXR0bGVSZXdhcmQucHJvdG8SDFJlTWFzdGVyc0xpYiJrCgxC",
            "YXR0bGVSZXdhcmQSGAoQYmF0dGxlX3Jld2FyZF9pZBgBIAEoBRILCgNleHAY",
            "AiABKAUSDQoFY29pbnMYAyABKAUSCgoCdTQYBCABKAUSGQoRcmV3YXJkX3By",
            "ZXNldF9pZHMYBSADKAUiQAoRQmF0dGxlUmV3YXJkVGFibGUSKwoHZW50cmll",
            "cxgBIAMoCzIaLlJlTWFzdGVyc0xpYi5CYXR0bGVSZXdhcmRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.BattleReward), global::ReMastersLib.BattleReward.Parser, new[]{ "BattleRewardId", "Exp", "Coins", "U4", "RewardPresetIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.BattleRewardTable), global::ReMastersLib.BattleRewardTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BattleReward : pb::IMessage<BattleReward> {
    private static readonly pb::MessageParser<BattleReward> _parser = new pb::MessageParser<BattleReward>(() => new BattleReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.BattleRewardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReward(BattleReward other) : this() {
      battleRewardId_ = other.battleRewardId_;
      exp_ = other.exp_;
      coins_ = other.coins_;
      u4_ = other.u4_;
      rewardPresetIds_ = other.rewardPresetIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReward Clone() {
      return new BattleReward(this);
    }

    /// <summary>Field number for the "battle_reward_id" field.</summary>
    public const int BattleRewardIdFieldNumber = 1;
    private int battleRewardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleRewardId {
      get { return battleRewardId_; }
      set {
        battleRewardId_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "coins" field.</summary>
    public const int CoinsFieldNumber = 3;
    private int coins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coins {
      get { return coins_; }
      set {
        coins_ = value;
      }
    }

    /// <summary>Field number for the "u4" field.</summary>
    public const int U4FieldNumber = 4;
    private int u4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U4 {
      get { return u4_; }
      set {
        u4_ = value;
      }
    }

    /// <summary>Field number for the "reward_preset_ids" field.</summary>
    public const int RewardPresetIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_rewardPresetIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> rewardPresetIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// BattleRewardPreset.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardPresetIds {
      get { return rewardPresetIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleRewardId != other.BattleRewardId) return false;
      if (Exp != other.Exp) return false;
      if (Coins != other.Coins) return false;
      if (U4 != other.U4) return false;
      if(!rewardPresetIds_.Equals(other.rewardPresetIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleRewardId != 0) hash ^= BattleRewardId.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Coins != 0) hash ^= Coins.GetHashCode();
      if (U4 != 0) hash ^= U4.GetHashCode();
      hash ^= rewardPresetIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleRewardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleRewardId);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (Coins != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coins);
      }
      if (U4 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(U4);
      }
      rewardPresetIds_.WriteTo(output, _repeated_rewardPresetIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleRewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleRewardId);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Coins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coins);
      }
      if (U4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U4);
      }
      size += rewardPresetIds_.CalculateSize(_repeated_rewardPresetIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleReward other) {
      if (other == null) {
        return;
      }
      if (other.BattleRewardId != 0) {
        BattleRewardId = other.BattleRewardId;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Coins != 0) {
        Coins = other.Coins;
      }
      if (other.U4 != 0) {
        U4 = other.U4;
      }
      rewardPresetIds_.Add(other.rewardPresetIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleRewardId = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 24: {
            Coins = input.ReadInt32();
            break;
          }
          case 32: {
            U4 = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            rewardPresetIds_.AddEntriesFrom(input, _repeated_rewardPresetIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleRewardTable : pb::IMessage<BattleRewardTable> {
    private static readonly pb::MessageParser<BattleRewardTable> _parser = new pb::MessageParser<BattleRewardTable>(() => new BattleRewardTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRewardTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.BattleRewardReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRewardTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRewardTable(BattleRewardTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRewardTable Clone() {
      return new BattleRewardTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.BattleReward> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.BattleReward.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.BattleReward> entries_ = new pbc::RepeatedField<global::ReMastersLib.BattleReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.BattleReward> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleRewardTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleRewardTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleRewardTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
