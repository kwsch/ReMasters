// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/ScoutFilter.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/ScoutFilter.proto</summary>
  public static partial class ScoutFilterReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/ScoutFilter.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScoutFilterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90by9TY291dEZpbHRlci5wcm90bxIMUmVNYXN0ZXJzTGliIkEKC1Nj",
            "b3V0RmlsdGVyEhAKCHNjb3V0X2lkGAEgASgJEgoKAnUyGAIgASgJEhQKDGlz",
            "X3BhaWRfb25seRgDIAEoCCI+ChBTY291dEZpbHRlclRhYmxlEioKB2VudHJp",
            "ZXMYASADKAsyGS5SZU1hc3RlcnNMaWIuU2NvdXRGaWx0ZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.ScoutFilter), global::ReMastersLib.ScoutFilter.Parser, new[]{ "ScoutId", "U2", "IsPaidOnly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.ScoutFilterTable), global::ReMastersLib.ScoutFilterTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ScoutFilter : pb::IMessage<ScoutFilter> {
    private static readonly pb::MessageParser<ScoutFilter> _parser = new pb::MessageParser<ScoutFilter>(() => new ScoutFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoutFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.ScoutFilterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutFilter(ScoutFilter other) : this() {
      scoutId_ = other.scoutId_;
      u2_ = other.u2_;
      isPaidOnly_ = other.isPaidOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutFilter Clone() {
      return new ScoutFilter(this);
    }

    /// <summary>Field number for the "scout_id" field.</summary>
    public const int ScoutIdFieldNumber = 1;
    private string scoutId_ = "";
    /// <summary>
    /// Scout.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScoutId {
      get { return scoutId_; }
      set {
        scoutId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "u2" field.</summary>
    public const int U2FieldNumber = 2;
    private string u2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string U2 {
      get { return u2_; }
      set {
        u2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_paid_only" field.</summary>
    public const int IsPaidOnlyFieldNumber = 3;
    private bool isPaidOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPaidOnly {
      get { return isPaidOnly_; }
      set {
        isPaidOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoutFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoutFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScoutId != other.ScoutId) return false;
      if (U2 != other.U2) return false;
      if (IsPaidOnly != other.IsPaidOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScoutId.Length != 0) hash ^= ScoutId.GetHashCode();
      if (U2.Length != 0) hash ^= U2.GetHashCode();
      if (IsPaidOnly != false) hash ^= IsPaidOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScoutId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScoutId);
      }
      if (U2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(U2);
      }
      if (IsPaidOnly != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPaidOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScoutId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScoutId);
      }
      if (U2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(U2);
      }
      if (IsPaidOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoutFilter other) {
      if (other == null) {
        return;
      }
      if (other.ScoutId.Length != 0) {
        ScoutId = other.ScoutId;
      }
      if (other.U2.Length != 0) {
        U2 = other.U2;
      }
      if (other.IsPaidOnly != false) {
        IsPaidOnly = other.IsPaidOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ScoutId = input.ReadString();
            break;
          }
          case 18: {
            U2 = input.ReadString();
            break;
          }
          case 24: {
            IsPaidOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoutFilterTable : pb::IMessage<ScoutFilterTable> {
    private static readonly pb::MessageParser<ScoutFilterTable> _parser = new pb::MessageParser<ScoutFilterTable>(() => new ScoutFilterTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoutFilterTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.ScoutFilterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutFilterTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutFilterTable(ScoutFilterTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoutFilterTable Clone() {
      return new ScoutFilterTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.ScoutFilter> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.ScoutFilter.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.ScoutFilter> entries_ = new pbc::RepeatedField<global::ReMastersLib.ScoutFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.ScoutFilter> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoutFilterTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoutFilterTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoutFilterTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
