// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/StoryQuest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/StoryQuest.proto</summary>
  public static partial class StoryQuestReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/StoryQuest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StoryQuestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQcm90by9TdG9yeVF1ZXN0LnByb3RvEgxSZU1hc3RlcnNMaWIilgUKClN0",
            "b3J5UXVlc3QSFgoOc3RvcnlfcXVlc3RfaWQYASABKAQSFQoNcXVlc3RfbmFt",
            "ZV9pZBgCIAEoCRIQCghmaWVsZF9pZBgDIAEoBBIdChVyZXF1aXJlZF9jb25k",
            "aXRpb25faWQYBCABKAMSDwoHc29ydF9ieRgFIAEoBBIUCgxhcmVhX3Nwb3Rf",
            "aWQYBiABKAQSEwoLaXRlbV9zZXRfaWQYByABKAQSFgoOcXVlc3RfZ3JvdXBf",
            "aWQYCCABKAQSEgoKZmllbGRfdHlwZRgJIAEoBRITCgtzY2hlZHVsZV9pZBgK",
            "IAEoCRIYChBwbGF5X2NvdW50X2xpbWl0GAsgASgDEh4KFmNoYXB0ZXJfb3Bl",
            "bl9hbmltYXRpb24YDCABKAgSLAoKZGlmZmljdWx0eRgNIAEoDjIYLlJlTWFz",
            "dGVyc0xpYi5EaWZmaWN1bHR5Eh0KFXdlZWtfc2NoZWR1bGVfa2V5d29yZBgO",
            "IAEoCRINCgVkZWJ1ZxgPIAEoCBIWCg5kZWJ1Z19jYXRlZ29yeRgQIAEoAxIT",
            "CgtyZXdhcmRfdHlwZRgRIAEoBRIZChFzaG93Y2FzZWRfaXRlbV9pZBgSIAEo",
            "AxIgChhjaGFyYV9xdWVzdF9saXN0X2l0ZW1faWQYEyABKAMSGgoSaXNfZXZv",
            "bHV0aW9uX3F1ZXN0GBQgASgIEisKCnF1ZXN0X3R5cGUYFSABKA4yFy5SZU1h",
            "c3RlcnNMaWIuUXVlc3RUeXBlEhcKD2lzX3NlYXJjaF9xdWVzdBgWIAEoCBIV",
            "Cg1uZXh0X3F1ZXN0X2lkGBcgASgEEgsKA3UyNBgYIAEoBBILCgN1MjUYGSAB",
            "KAQSCwoDdTI2GBogASgEEgsKA3UyNxgbIAEoBCI8Cg9TdG9yeVF1ZXN0VGFi",
            "bGUSKQoHZW50cmllcxgBIAMoCzIYLlJlTWFzdGVyc0xpYi5TdG9yeVF1ZXN0",
            "KlgKCkRpZmZpY3VsdHkSCAoETm9uZRAAEgoKBk5vcm1hbBABEggKBEhhcmQQ",
            "AhIMCghWZXJ5SGFyZBADEg0KCVN1cGVySGFyZBAEEg0KCVVsdHJhSGFyZBAF",
            "Kk0KCVF1ZXN0VHlwZRINCglNYWluU3RvcnkQABIQCgxUcmFpbmluZ0FyZWEQ",
            "ARITCg9TeW5jUGFpclN0b3JpZXMQAhIKCgZFdmVudHMQA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ReMastersLib.Difficulty), typeof(global::ReMastersLib.QuestType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.StoryQuest), global::ReMastersLib.StoryQuest.Parser, new[]{ "StoryQuestId", "QuestNameId", "FieldId", "RequiredConditionId", "SortBy", "AreaSpotId", "ItemSetId", "QuestGroupId", "FieldType", "ScheduleId", "PlayCountLimit", "ChapterOpenAnimation", "Difficulty", "WeekScheduleKeyword", "Debug", "DebugCategory", "RewardType", "ShowcasedItemId", "CharaQuestListItemId", "IsEvolutionQuest", "QuestType", "IsSearchQuest", "NextQuestId", "U24", "U25", "U26", "U27" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.StoryQuestTable), global::ReMastersLib.StoryQuestTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Difficulty {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Normal")] Normal = 1,
    [pbr::OriginalName("Hard")] Hard = 2,
    [pbr::OriginalName("VeryHard")] VeryHard = 3,
    [pbr::OriginalName("SuperHard")] SuperHard = 4,
    [pbr::OriginalName("UltraHard")] UltraHard = 5,
  }

  public enum QuestType {
    [pbr::OriginalName("MainStory")] MainStory = 0,
    [pbr::OriginalName("TrainingArea")] TrainingArea = 1,
    [pbr::OriginalName("SyncPairStories")] SyncPairStories = 2,
    [pbr::OriginalName("Events")] Events = 3,
  }

  #endregion

  #region Messages
  public sealed partial class StoryQuest : pb::IMessage<StoryQuest> {
    private static readonly pb::MessageParser<StoryQuest> _parser = new pb::MessageParser<StoryQuest>(() => new StoryQuest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoryQuest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.StoryQuestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryQuest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryQuest(StoryQuest other) : this() {
      storyQuestId_ = other.storyQuestId_;
      questNameId_ = other.questNameId_;
      fieldId_ = other.fieldId_;
      requiredConditionId_ = other.requiredConditionId_;
      sortBy_ = other.sortBy_;
      areaSpotId_ = other.areaSpotId_;
      itemSetId_ = other.itemSetId_;
      questGroupId_ = other.questGroupId_;
      fieldType_ = other.fieldType_;
      scheduleId_ = other.scheduleId_;
      playCountLimit_ = other.playCountLimit_;
      chapterOpenAnimation_ = other.chapterOpenAnimation_;
      difficulty_ = other.difficulty_;
      weekScheduleKeyword_ = other.weekScheduleKeyword_;
      debug_ = other.debug_;
      debugCategory_ = other.debugCategory_;
      rewardType_ = other.rewardType_;
      showcasedItemId_ = other.showcasedItemId_;
      charaQuestListItemId_ = other.charaQuestListItemId_;
      isEvolutionQuest_ = other.isEvolutionQuest_;
      questType_ = other.questType_;
      isSearchQuest_ = other.isSearchQuest_;
      nextQuestId_ = other.nextQuestId_;
      u24_ = other.u24_;
      u25_ = other.u25_;
      u26_ = other.u26_;
      u27_ = other.u27_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryQuest Clone() {
      return new StoryQuest(this);
    }

    /// <summary>Field number for the "story_quest_id" field.</summary>
    public const int StoryQuestIdFieldNumber = 1;
    private ulong storyQuestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StoryQuestId {
      get { return storyQuestId_; }
      set {
        storyQuestId_ = value;
      }
    }

    /// <summary>Field number for the "quest_name_id" field.</summary>
    public const int QuestNameIdFieldNumber = 2;
    private string questNameId_ = "";
    /// <summary>
    /// story_quest_name_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuestNameId {
      get { return questNameId_; }
      set {
        questNameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 3;
    private ulong fieldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    /// <summary>Field number for the "required_condition_id" field.</summary>
    public const int RequiredConditionIdFieldNumber = 4;
    private long requiredConditionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequiredConditionId {
      get { return requiredConditionId_; }
      set {
        requiredConditionId_ = value;
      }
    }

    /// <summary>Field number for the "sort_by" field.</summary>
    public const int SortByFieldNumber = 5;
    private ulong sortBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SortBy {
      get { return sortBy_; }
      set {
        sortBy_ = value;
      }
    }

    /// <summary>Field number for the "area_spot_id" field.</summary>
    public const int AreaSpotIdFieldNumber = 6;
    private ulong areaSpotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AreaSpotId {
      get { return areaSpotId_; }
      set {
        areaSpotId_ = value;
      }
    }

    /// <summary>Field number for the "item_set_id" field.</summary>
    public const int ItemSetIdFieldNumber = 7;
    private ulong itemSetId_;
    /// <summary>
    /// ItemSet.pb (First-time rewards)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemSetId {
      get { return itemSetId_; }
      set {
        itemSetId_ = value;
      }
    }

    /// <summary>Field number for the "quest_group_id" field.</summary>
    public const int QuestGroupIdFieldNumber = 8;
    private ulong questGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuestGroupId {
      get { return questGroupId_; }
      set {
        questGroupId_ = value;
      }
    }

    /// <summary>Field number for the "field_type" field.</summary>
    public const int FieldTypeFieldNumber = 9;
    private int fieldType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldType {
      get { return fieldType_; }
      set {
        fieldType_ = value;
      }
    }

    /// <summary>Field number for the "schedule_id" field.</summary>
    public const int ScheduleIdFieldNumber = 10;
    private string scheduleId_ = "";
    /// <summary>
    /// Schedule.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScheduleId {
      get { return scheduleId_; }
      set {
        scheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "play_count_limit" field.</summary>
    public const int PlayCountLimitFieldNumber = 11;
    private long playCountLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayCountLimit {
      get { return playCountLimit_; }
      set {
        playCountLimit_ = value;
      }
    }

    /// <summary>Field number for the "chapter_open_animation" field.</summary>
    public const int ChapterOpenAnimationFieldNumber = 12;
    private bool chapterOpenAnimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChapterOpenAnimation {
      get { return chapterOpenAnimation_; }
      set {
        chapterOpenAnimation_ = value;
      }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 13;
    private global::ReMastersLib.Difficulty difficulty_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ReMastersLib.Difficulty Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    /// <summary>Field number for the "week_schedule_keyword" field.</summary>
    public const int WeekScheduleKeywordFieldNumber = 14;
    private string weekScheduleKeyword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeekScheduleKeyword {
      get { return weekScheduleKeyword_; }
      set {
        weekScheduleKeyword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "debug" field.</summary>
    public const int DebugFieldNumber = 15;
    private bool debug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Debug {
      get { return debug_; }
      set {
        debug_ = value;
      }
    }

    /// <summary>Field number for the "debug_category" field.</summary>
    public const int DebugCategoryFieldNumber = 16;
    private long debugCategory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DebugCategory {
      get { return debugCategory_; }
      set {
        debugCategory_ = value;
      }
    }

    /// <summary>Field number for the "reward_type" field.</summary>
    public const int RewardTypeFieldNumber = 17;
    private int rewardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardType {
      get { return rewardType_; }
      set {
        rewardType_ = value;
      }
    }

    /// <summary>Field number for the "showcased_item_id" field.</summary>
    public const int ShowcasedItemIdFieldNumber = 18;
    private long showcasedItemId_;
    /// <summary>
    /// Item.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShowcasedItemId {
      get { return showcasedItemId_; }
      set {
        showcasedItemId_ = value;
      }
    }

    /// <summary>Field number for the "chara_quest_list_item_id" field.</summary>
    public const int CharaQuestListItemIdFieldNumber = 19;
    private long charaQuestListItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CharaQuestListItemId {
      get { return charaQuestListItemId_; }
      set {
        charaQuestListItemId_ = value;
      }
    }

    /// <summary>Field number for the "is_evolution_quest" field.</summary>
    public const int IsEvolutionQuestFieldNumber = 20;
    private bool isEvolutionQuest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEvolutionQuest {
      get { return isEvolutionQuest_; }
      set {
        isEvolutionQuest_ = value;
      }
    }

    /// <summary>Field number for the "quest_type" field.</summary>
    public const int QuestTypeFieldNumber = 21;
    private global::ReMastersLib.QuestType questType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ReMastersLib.QuestType QuestType {
      get { return questType_; }
      set {
        questType_ = value;
      }
    }

    /// <summary>Field number for the "is_search_quest" field.</summary>
    public const int IsSearchQuestFieldNumber = 22;
    private bool isSearchQuest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSearchQuest {
      get { return isSearchQuest_; }
      set {
        isSearchQuest_ = value;
      }
    }

    /// <summary>Field number for the "next_quest_id" field.</summary>
    public const int NextQuestIdFieldNumber = 23;
    private ulong nextQuestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NextQuestId {
      get { return nextQuestId_; }
      set {
        nextQuestId_ = value;
      }
    }

    /// <summary>Field number for the "u24" field.</summary>
    public const int U24FieldNumber = 24;
    private ulong u24_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong U24 {
      get { return u24_; }
      set {
        u24_ = value;
      }
    }

    /// <summary>Field number for the "u25" field.</summary>
    public const int U25FieldNumber = 25;
    private ulong u25_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong U25 {
      get { return u25_; }
      set {
        u25_ = value;
      }
    }

    /// <summary>Field number for the "u26" field.</summary>
    public const int U26FieldNumber = 26;
    private ulong u26_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong U26 {
      get { return u26_; }
      set {
        u26_ = value;
      }
    }

    /// <summary>Field number for the "u27" field.</summary>
    public const int U27FieldNumber = 27;
    private ulong u27_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong U27 {
      get { return u27_; }
      set {
        u27_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoryQuest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoryQuest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoryQuestId != other.StoryQuestId) return false;
      if (QuestNameId != other.QuestNameId) return false;
      if (FieldId != other.FieldId) return false;
      if (RequiredConditionId != other.RequiredConditionId) return false;
      if (SortBy != other.SortBy) return false;
      if (AreaSpotId != other.AreaSpotId) return false;
      if (ItemSetId != other.ItemSetId) return false;
      if (QuestGroupId != other.QuestGroupId) return false;
      if (FieldType != other.FieldType) return false;
      if (ScheduleId != other.ScheduleId) return false;
      if (PlayCountLimit != other.PlayCountLimit) return false;
      if (ChapterOpenAnimation != other.ChapterOpenAnimation) return false;
      if (Difficulty != other.Difficulty) return false;
      if (WeekScheduleKeyword != other.WeekScheduleKeyword) return false;
      if (Debug != other.Debug) return false;
      if (DebugCategory != other.DebugCategory) return false;
      if (RewardType != other.RewardType) return false;
      if (ShowcasedItemId != other.ShowcasedItemId) return false;
      if (CharaQuestListItemId != other.CharaQuestListItemId) return false;
      if (IsEvolutionQuest != other.IsEvolutionQuest) return false;
      if (QuestType != other.QuestType) return false;
      if (IsSearchQuest != other.IsSearchQuest) return false;
      if (NextQuestId != other.NextQuestId) return false;
      if (U24 != other.U24) return false;
      if (U25 != other.U25) return false;
      if (U26 != other.U26) return false;
      if (U27 != other.U27) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StoryQuestId != 0UL) hash ^= StoryQuestId.GetHashCode();
      if (QuestNameId.Length != 0) hash ^= QuestNameId.GetHashCode();
      if (FieldId != 0UL) hash ^= FieldId.GetHashCode();
      if (RequiredConditionId != 0L) hash ^= RequiredConditionId.GetHashCode();
      if (SortBy != 0UL) hash ^= SortBy.GetHashCode();
      if (AreaSpotId != 0UL) hash ^= AreaSpotId.GetHashCode();
      if (ItemSetId != 0UL) hash ^= ItemSetId.GetHashCode();
      if (QuestGroupId != 0UL) hash ^= QuestGroupId.GetHashCode();
      if (FieldType != 0) hash ^= FieldType.GetHashCode();
      if (ScheduleId.Length != 0) hash ^= ScheduleId.GetHashCode();
      if (PlayCountLimit != 0L) hash ^= PlayCountLimit.GetHashCode();
      if (ChapterOpenAnimation != false) hash ^= ChapterOpenAnimation.GetHashCode();
      if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
      if (WeekScheduleKeyword.Length != 0) hash ^= WeekScheduleKeyword.GetHashCode();
      if (Debug != false) hash ^= Debug.GetHashCode();
      if (DebugCategory != 0L) hash ^= DebugCategory.GetHashCode();
      if (RewardType != 0) hash ^= RewardType.GetHashCode();
      if (ShowcasedItemId != 0L) hash ^= ShowcasedItemId.GetHashCode();
      if (CharaQuestListItemId != 0L) hash ^= CharaQuestListItemId.GetHashCode();
      if (IsEvolutionQuest != false) hash ^= IsEvolutionQuest.GetHashCode();
      if (QuestType != 0) hash ^= QuestType.GetHashCode();
      if (IsSearchQuest != false) hash ^= IsSearchQuest.GetHashCode();
      if (NextQuestId != 0UL) hash ^= NextQuestId.GetHashCode();
      if (U24 != 0UL) hash ^= U24.GetHashCode();
      if (U25 != 0UL) hash ^= U25.GetHashCode();
      if (U26 != 0UL) hash ^= U26.GetHashCode();
      if (U27 != 0UL) hash ^= U27.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StoryQuestId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StoryQuestId);
      }
      if (QuestNameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(QuestNameId);
      }
      if (FieldId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FieldId);
      }
      if (RequiredConditionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RequiredConditionId);
      }
      if (SortBy != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SortBy);
      }
      if (AreaSpotId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AreaSpotId);
      }
      if (ItemSetId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ItemSetId);
      }
      if (QuestGroupId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(QuestGroupId);
      }
      if (FieldType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FieldType);
      }
      if (ScheduleId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ScheduleId);
      }
      if (PlayCountLimit != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(PlayCountLimit);
      }
      if (ChapterOpenAnimation != false) {
        output.WriteRawTag(96);
        output.WriteBool(ChapterOpenAnimation);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Difficulty);
      }
      if (WeekScheduleKeyword.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WeekScheduleKeyword);
      }
      if (Debug != false) {
        output.WriteRawTag(120);
        output.WriteBool(Debug);
      }
      if (DebugCategory != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(DebugCategory);
      }
      if (RewardType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RewardType);
      }
      if (ShowcasedItemId != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(ShowcasedItemId);
      }
      if (CharaQuestListItemId != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(CharaQuestListItemId);
      }
      if (IsEvolutionQuest != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsEvolutionQuest);
      }
      if (QuestType != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) QuestType);
      }
      if (IsSearchQuest != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsSearchQuest);
      }
      if (NextQuestId != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(NextQuestId);
      }
      if (U24 != 0UL) {
        output.WriteRawTag(192, 1);
        output.WriteUInt64(U24);
      }
      if (U25 != 0UL) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(U25);
      }
      if (U26 != 0UL) {
        output.WriteRawTag(208, 1);
        output.WriteUInt64(U26);
      }
      if (U27 != 0UL) {
        output.WriteRawTag(216, 1);
        output.WriteUInt64(U27);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StoryQuestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StoryQuestId);
      }
      if (QuestNameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestNameId);
      }
      if (FieldId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FieldId);
      }
      if (RequiredConditionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredConditionId);
      }
      if (SortBy != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SortBy);
      }
      if (AreaSpotId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AreaSpotId);
      }
      if (ItemSetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemSetId);
      }
      if (QuestGroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QuestGroupId);
      }
      if (FieldType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldType);
      }
      if (ScheduleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScheduleId);
      }
      if (PlayCountLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayCountLimit);
      }
      if (ChapterOpenAnimation != false) {
        size += 1 + 1;
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Difficulty);
      }
      if (WeekScheduleKeyword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WeekScheduleKeyword);
      }
      if (Debug != false) {
        size += 1 + 1;
      }
      if (DebugCategory != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DebugCategory);
      }
      if (RewardType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RewardType);
      }
      if (ShowcasedItemId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ShowcasedItemId);
      }
      if (CharaQuestListItemId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CharaQuestListItemId);
      }
      if (IsEvolutionQuest != false) {
        size += 2 + 1;
      }
      if (QuestType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) QuestType);
      }
      if (IsSearchQuest != false) {
        size += 2 + 1;
      }
      if (NextQuestId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NextQuestId);
      }
      if (U24 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(U24);
      }
      if (U25 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(U25);
      }
      if (U26 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(U26);
      }
      if (U27 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(U27);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoryQuest other) {
      if (other == null) {
        return;
      }
      if (other.StoryQuestId != 0UL) {
        StoryQuestId = other.StoryQuestId;
      }
      if (other.QuestNameId.Length != 0) {
        QuestNameId = other.QuestNameId;
      }
      if (other.FieldId != 0UL) {
        FieldId = other.FieldId;
      }
      if (other.RequiredConditionId != 0L) {
        RequiredConditionId = other.RequiredConditionId;
      }
      if (other.SortBy != 0UL) {
        SortBy = other.SortBy;
      }
      if (other.AreaSpotId != 0UL) {
        AreaSpotId = other.AreaSpotId;
      }
      if (other.ItemSetId != 0UL) {
        ItemSetId = other.ItemSetId;
      }
      if (other.QuestGroupId != 0UL) {
        QuestGroupId = other.QuestGroupId;
      }
      if (other.FieldType != 0) {
        FieldType = other.FieldType;
      }
      if (other.ScheduleId.Length != 0) {
        ScheduleId = other.ScheduleId;
      }
      if (other.PlayCountLimit != 0L) {
        PlayCountLimit = other.PlayCountLimit;
      }
      if (other.ChapterOpenAnimation != false) {
        ChapterOpenAnimation = other.ChapterOpenAnimation;
      }
      if (other.Difficulty != 0) {
        Difficulty = other.Difficulty;
      }
      if (other.WeekScheduleKeyword.Length != 0) {
        WeekScheduleKeyword = other.WeekScheduleKeyword;
      }
      if (other.Debug != false) {
        Debug = other.Debug;
      }
      if (other.DebugCategory != 0L) {
        DebugCategory = other.DebugCategory;
      }
      if (other.RewardType != 0) {
        RewardType = other.RewardType;
      }
      if (other.ShowcasedItemId != 0L) {
        ShowcasedItemId = other.ShowcasedItemId;
      }
      if (other.CharaQuestListItemId != 0L) {
        CharaQuestListItemId = other.CharaQuestListItemId;
      }
      if (other.IsEvolutionQuest != false) {
        IsEvolutionQuest = other.IsEvolutionQuest;
      }
      if (other.QuestType != 0) {
        QuestType = other.QuestType;
      }
      if (other.IsSearchQuest != false) {
        IsSearchQuest = other.IsSearchQuest;
      }
      if (other.NextQuestId != 0UL) {
        NextQuestId = other.NextQuestId;
      }
      if (other.U24 != 0UL) {
        U24 = other.U24;
      }
      if (other.U25 != 0UL) {
        U25 = other.U25;
      }
      if (other.U26 != 0UL) {
        U26 = other.U26;
      }
      if (other.U27 != 0UL) {
        U27 = other.U27;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoryQuestId = input.ReadUInt64();
            break;
          }
          case 18: {
            QuestNameId = input.ReadString();
            break;
          }
          case 24: {
            FieldId = input.ReadUInt64();
            break;
          }
          case 32: {
            RequiredConditionId = input.ReadInt64();
            break;
          }
          case 40: {
            SortBy = input.ReadUInt64();
            break;
          }
          case 48: {
            AreaSpotId = input.ReadUInt64();
            break;
          }
          case 56: {
            ItemSetId = input.ReadUInt64();
            break;
          }
          case 64: {
            QuestGroupId = input.ReadUInt64();
            break;
          }
          case 72: {
            FieldType = input.ReadInt32();
            break;
          }
          case 82: {
            ScheduleId = input.ReadString();
            break;
          }
          case 88: {
            PlayCountLimit = input.ReadInt64();
            break;
          }
          case 96: {
            ChapterOpenAnimation = input.ReadBool();
            break;
          }
          case 104: {
            difficulty_ = (global::ReMastersLib.Difficulty) input.ReadEnum();
            break;
          }
          case 114: {
            WeekScheduleKeyword = input.ReadString();
            break;
          }
          case 120: {
            Debug = input.ReadBool();
            break;
          }
          case 128: {
            DebugCategory = input.ReadInt64();
            break;
          }
          case 136: {
            RewardType = input.ReadInt32();
            break;
          }
          case 144: {
            ShowcasedItemId = input.ReadInt64();
            break;
          }
          case 152: {
            CharaQuestListItemId = input.ReadInt64();
            break;
          }
          case 160: {
            IsEvolutionQuest = input.ReadBool();
            break;
          }
          case 168: {
            questType_ = (global::ReMastersLib.QuestType) input.ReadEnum();
            break;
          }
          case 176: {
            IsSearchQuest = input.ReadBool();
            break;
          }
          case 184: {
            NextQuestId = input.ReadUInt64();
            break;
          }
          case 192: {
            U24 = input.ReadUInt64();
            break;
          }
          case 200: {
            U25 = input.ReadUInt64();
            break;
          }
          case 208: {
            U26 = input.ReadUInt64();
            break;
          }
          case 216: {
            U27 = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoryQuestTable : pb::IMessage<StoryQuestTable> {
    private static readonly pb::MessageParser<StoryQuestTable> _parser = new pb::MessageParser<StoryQuestTable>(() => new StoryQuestTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoryQuestTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.StoryQuestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryQuestTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryQuestTable(StoryQuestTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryQuestTable Clone() {
      return new StoryQuestTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.StoryQuest> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.StoryQuest.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.StoryQuest> entries_ = new pbc::RepeatedField<global::ReMastersLib.StoryQuest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.StoryQuest> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoryQuestTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoryQuestTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoryQuestTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
