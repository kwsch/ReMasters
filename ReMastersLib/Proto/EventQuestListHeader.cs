// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/EventQuestListHeader.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/EventQuestListHeader.proto</summary>
  public static partial class EventQuestListHeaderReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/EventQuestListHeader.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventQuestListHeaderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBQcm90by9FdmVudFF1ZXN0TGlzdEhlYWRlci5wcm90bxIMUmVNYXN0ZXJz",
            "TGliIqgBChRFdmVudFF1ZXN0TGlzdEhlYWRlchIWCg5xdWVzdF9ncm91cF9p",
            "ZBgBIAEoBRIPCgdpdGVtX2lkGAIgASgDEhAKCHF1YW50aXR5GAMgASgFEhYK",
            "DnN0b3J5X3F1ZXN0X2lkGAQgASgDEhUKDXRpdGxlX3RleHRfaWQYBSABKAUS",
            "FAoMZGVzY190ZXh0X2lkGAYgASgFEhAKCGltYWdlX2lkGAcgASgJIlAKGUV2",
            "ZW50UXVlc3RMaXN0SGVhZGVyVGFibGUSMwoHZW50cmllcxgBIAMoCzIiLlJl",
            "TWFzdGVyc0xpYi5FdmVudFF1ZXN0TGlzdEhlYWRlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.EventQuestListHeader), global::ReMastersLib.EventQuestListHeader.Parser, new[]{ "QuestGroupId", "ItemId", "Quantity", "StoryQuestId", "TitleTextId", "DescTextId", "ImageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.EventQuestListHeaderTable), global::ReMastersLib.EventQuestListHeaderTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EventQuestListHeader : pb::IMessage<EventQuestListHeader> {
    private static readonly pb::MessageParser<EventQuestListHeader> _parser = new pb::MessageParser<EventQuestListHeader>(() => new EventQuestListHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventQuestListHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.EventQuestListHeaderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventQuestListHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventQuestListHeader(EventQuestListHeader other) : this() {
      questGroupId_ = other.questGroupId_;
      itemId_ = other.itemId_;
      quantity_ = other.quantity_;
      storyQuestId_ = other.storyQuestId_;
      titleTextId_ = other.titleTextId_;
      descTextId_ = other.descTextId_;
      imageId_ = other.imageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventQuestListHeader Clone() {
      return new EventQuestListHeader(this);
    }

    /// <summary>Field number for the "quest_group_id" field.</summary>
    public const int QuestGroupIdFieldNumber = 1;
    private int questGroupId_;
    /// <summary>
    /// EventQuestGroup.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestGroupId {
      get { return questGroupId_; }
      set {
        questGroupId_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private long itemId_;
    /// <summary>
    /// item required to obtain the legendary pair's area info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private int quantity_;
    /// <summary>
    /// quantity of ^
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "story_quest_id" field.</summary>
    public const int StoryQuestIdFieldNumber = 4;
    private long storyQuestId_;
    /// <summary>
    /// story_quest_id of the final
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StoryQuestId {
      get { return storyQuestId_; }
      set {
        storyQuestId_ = value;
      }
    }

    /// <summary>Field number for the "title_text_id" field.</summary>
    public const int TitleTextIdFieldNumber = 5;
    private int titleTextId_;
    /// <summary>
    /// event_legend_header_title_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TitleTextId {
      get { return titleTextId_; }
      set {
        titleTextId_ = value;
      }
    }

    /// <summary>Field number for the "desc_text_id" field.</summary>
    public const int DescTextIdFieldNumber = 6;
    private int descTextId_;
    /// <summary>
    /// event_legend_header_description_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DescTextId {
      get { return descTextId_; }
      set {
        descTextId_ = value;
      }
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 7;
    private string imageId_ = "";
    /// <summary>
    /// ui/image/Event/Legend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventQuestListHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventQuestListHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestGroupId != other.QuestGroupId) return false;
      if (ItemId != other.ItemId) return false;
      if (Quantity != other.Quantity) return false;
      if (StoryQuestId != other.StoryQuestId) return false;
      if (TitleTextId != other.TitleTextId) return false;
      if (DescTextId != other.DescTextId) return false;
      if (ImageId != other.ImageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QuestGroupId != 0) hash ^= QuestGroupId.GetHashCode();
      if (ItemId != 0L) hash ^= ItemId.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (StoryQuestId != 0L) hash ^= StoryQuestId.GetHashCode();
      if (TitleTextId != 0) hash ^= TitleTextId.GetHashCode();
      if (DescTextId != 0) hash ^= DescTextId.GetHashCode();
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QuestGroupId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestGroupId);
      }
      if (ItemId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ItemId);
      }
      if (Quantity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Quantity);
      }
      if (StoryQuestId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StoryQuestId);
      }
      if (TitleTextId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TitleTextId);
      }
      if (DescTextId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DescTextId);
      }
      if (ImageId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ImageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QuestGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestGroupId);
      }
      if (ItemId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemId);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (StoryQuestId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StoryQuestId);
      }
      if (TitleTextId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TitleTextId);
      }
      if (DescTextId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DescTextId);
      }
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventQuestListHeader other) {
      if (other == null) {
        return;
      }
      if (other.QuestGroupId != 0) {
        QuestGroupId = other.QuestGroupId;
      }
      if (other.ItemId != 0L) {
        ItemId = other.ItemId;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.StoryQuestId != 0L) {
        StoryQuestId = other.StoryQuestId;
      }
      if (other.TitleTextId != 0) {
        TitleTextId = other.TitleTextId;
      }
      if (other.DescTextId != 0) {
        DescTextId = other.DescTextId;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestGroupId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt64();
            break;
          }
          case 24: {
            Quantity = input.ReadInt32();
            break;
          }
          case 32: {
            StoryQuestId = input.ReadInt64();
            break;
          }
          case 40: {
            TitleTextId = input.ReadInt32();
            break;
          }
          case 48: {
            DescTextId = input.ReadInt32();
            break;
          }
          case 58: {
            ImageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventQuestListHeaderTable : pb::IMessage<EventQuestListHeaderTable> {
    private static readonly pb::MessageParser<EventQuestListHeaderTable> _parser = new pb::MessageParser<EventQuestListHeaderTable>(() => new EventQuestListHeaderTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventQuestListHeaderTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.EventQuestListHeaderReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventQuestListHeaderTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventQuestListHeaderTable(EventQuestListHeaderTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventQuestListHeaderTable Clone() {
      return new EventQuestListHeaderTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.EventQuestListHeader> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.EventQuestListHeader.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.EventQuestListHeader> entries_ = new pbc::RepeatedField<global::ReMastersLib.EventQuestListHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.EventQuestListHeader> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventQuestListHeaderTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventQuestListHeaderTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventQuestListHeaderTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
