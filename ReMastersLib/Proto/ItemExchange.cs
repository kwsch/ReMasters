// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/ItemExchange.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/ItemExchange.proto</summary>
  public static partial class ItemExchangeReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/ItemExchange.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ItemExchangeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9JdGVtRXhjaGFuZ2UucHJvdG8SDFJlTWFzdGVyc0xpYiLWAQoM",
            "SXRlbUV4Y2hhbmdlEhgKEGl0ZW1fZXhjaGFuZ2VfaWQYASABKAUSHgoWaXRl",
            "bV9leGNoYW5nZV9ncm91cF9pZBgCIAEoBRITCgtpdGVtX3NldF9pZBgDIAEo",
            "AxIPCgdpdGVtX2lkGAQgASgDEhAKCHF1YW50aXR5GAUgASgFEhMKC3NjaGVk",
            "dWxlX2lkGAYgASgJEg0KBWxpbWl0GAcgASgFEgoKAnU4GAggASgFEgoKAnU5",
            "GAkgASgFEgsKA3UxMBgKIAEoBRILCgN1MTEYCyABKAMiQAoRSXRlbUV4Y2hh",
            "bmdlVGFibGUSKwoHZW50cmllcxgBIAMoCzIaLlJlTWFzdGVyc0xpYi5JdGVt",
            "RXhjaGFuZ2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.ItemExchange), global::ReMastersLib.ItemExchange.Parser, new[]{ "ItemExchangeId", "ItemExchangeGroupId", "ItemSetId", "ItemId", "Quantity", "ScheduleId", "Limit", "U8", "U9", "U10", "U11" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.ItemExchangeTable), global::ReMastersLib.ItemExchangeTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ItemExchange : pb::IMessage<ItemExchange> {
    private static readonly pb::MessageParser<ItemExchange> _parser = new pb::MessageParser<ItemExchange>(() => new ItemExchange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemExchange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.ItemExchangeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemExchange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemExchange(ItemExchange other) : this() {
      itemExchangeId_ = other.itemExchangeId_;
      itemExchangeGroupId_ = other.itemExchangeGroupId_;
      itemSetId_ = other.itemSetId_;
      itemId_ = other.itemId_;
      quantity_ = other.quantity_;
      scheduleId_ = other.scheduleId_;
      limit_ = other.limit_;
      u8_ = other.u8_;
      u9_ = other.u9_;
      u10_ = other.u10_;
      u11_ = other.u11_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemExchange Clone() {
      return new ItemExchange(this);
    }

    /// <summary>Field number for the "item_exchange_id" field.</summary>
    public const int ItemExchangeIdFieldNumber = 1;
    private int itemExchangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemExchangeId {
      get { return itemExchangeId_; }
      set {
        itemExchangeId_ = value;
      }
    }

    /// <summary>Field number for the "item_exchange_group_id" field.</summary>
    public const int ItemExchangeGroupIdFieldNumber = 2;
    private int itemExchangeGroupId_;
    /// <summary>
    /// ItemExchangeGroup.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemExchangeGroupId {
      get { return itemExchangeGroupId_; }
      set {
        itemExchangeGroupId_ = value;
      }
    }

    /// <summary>Field number for the "item_set_id" field.</summary>
    public const int ItemSetIdFieldNumber = 3;
    private long itemSetId_;
    /// <summary>
    /// ItemSet.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemSetId {
      get { return itemSetId_; }
      set {
        itemSetId_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 4;
    private long itemId_;
    /// <summary>
    /// Item.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 5;
    private int quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "schedule_id" field.</summary>
    public const int ScheduleIdFieldNumber = 6;
    private string scheduleId_ = "";
    /// <summary>
    /// Schedule.pb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScheduleId {
      get { return scheduleId_; }
      set {
        scheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 7;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "u8" field.</summary>
    public const int U8FieldNumber = 8;
    private int u8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U8 {
      get { return u8_; }
      set {
        u8_ = value;
      }
    }

    /// <summary>Field number for the "u9" field.</summary>
    public const int U9FieldNumber = 9;
    private int u9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U9 {
      get { return u9_; }
      set {
        u9_ = value;
      }
    }

    /// <summary>Field number for the "u10" field.</summary>
    public const int U10FieldNumber = 10;
    private int u10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int U10 {
      get { return u10_; }
      set {
        u10_ = value;
      }
    }

    /// <summary>Field number for the "u11" field.</summary>
    public const int U11FieldNumber = 11;
    private long u11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long U11 {
      get { return u11_; }
      set {
        u11_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemExchange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemExchange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemExchangeId != other.ItemExchangeId) return false;
      if (ItemExchangeGroupId != other.ItemExchangeGroupId) return false;
      if (ItemSetId != other.ItemSetId) return false;
      if (ItemId != other.ItemId) return false;
      if (Quantity != other.Quantity) return false;
      if (ScheduleId != other.ScheduleId) return false;
      if (Limit != other.Limit) return false;
      if (U8 != other.U8) return false;
      if (U9 != other.U9) return false;
      if (U10 != other.U10) return false;
      if (U11 != other.U11) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemExchangeId != 0) hash ^= ItemExchangeId.GetHashCode();
      if (ItemExchangeGroupId != 0) hash ^= ItemExchangeGroupId.GetHashCode();
      if (ItemSetId != 0L) hash ^= ItemSetId.GetHashCode();
      if (ItemId != 0L) hash ^= ItemId.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (ScheduleId.Length != 0) hash ^= ScheduleId.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (U8 != 0) hash ^= U8.GetHashCode();
      if (U9 != 0) hash ^= U9.GetHashCode();
      if (U10 != 0) hash ^= U10.GetHashCode();
      if (U11 != 0L) hash ^= U11.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemExchangeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemExchangeId);
      }
      if (ItemExchangeGroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemExchangeGroupId);
      }
      if (ItemSetId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ItemSetId);
      }
      if (ItemId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ItemId);
      }
      if (Quantity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Quantity);
      }
      if (ScheduleId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ScheduleId);
      }
      if (Limit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Limit);
      }
      if (U8 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(U8);
      }
      if (U9 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(U9);
      }
      if (U10 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(U10);
      }
      if (U11 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(U11);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemExchangeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemExchangeId);
      }
      if (ItemExchangeGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemExchangeGroupId);
      }
      if (ItemSetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemSetId);
      }
      if (ItemId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemId);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (ScheduleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScheduleId);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (U8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U8);
      }
      if (U9 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U9);
      }
      if (U10 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(U10);
      }
      if (U11 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(U11);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemExchange other) {
      if (other == null) {
        return;
      }
      if (other.ItemExchangeId != 0) {
        ItemExchangeId = other.ItemExchangeId;
      }
      if (other.ItemExchangeGroupId != 0) {
        ItemExchangeGroupId = other.ItemExchangeGroupId;
      }
      if (other.ItemSetId != 0L) {
        ItemSetId = other.ItemSetId;
      }
      if (other.ItemId != 0L) {
        ItemId = other.ItemId;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.ScheduleId.Length != 0) {
        ScheduleId = other.ScheduleId;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.U8 != 0) {
        U8 = other.U8;
      }
      if (other.U9 != 0) {
        U9 = other.U9;
      }
      if (other.U10 != 0) {
        U10 = other.U10;
      }
      if (other.U11 != 0L) {
        U11 = other.U11;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemExchangeId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemExchangeGroupId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemSetId = input.ReadInt64();
            break;
          }
          case 32: {
            ItemId = input.ReadInt64();
            break;
          }
          case 40: {
            Quantity = input.ReadInt32();
            break;
          }
          case 50: {
            ScheduleId = input.ReadString();
            break;
          }
          case 56: {
            Limit = input.ReadInt32();
            break;
          }
          case 64: {
            U8 = input.ReadInt32();
            break;
          }
          case 72: {
            U9 = input.ReadInt32();
            break;
          }
          case 80: {
            U10 = input.ReadInt32();
            break;
          }
          case 88: {
            U11 = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemExchangeTable : pb::IMessage<ItemExchangeTable> {
    private static readonly pb::MessageParser<ItemExchangeTable> _parser = new pb::MessageParser<ItemExchangeTable>(() => new ItemExchangeTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemExchangeTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.ItemExchangeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemExchangeTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemExchangeTable(ItemExchangeTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemExchangeTable Clone() {
      return new ItemExchangeTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.ItemExchange> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.ItemExchange.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.ItemExchange> entries_ = new pbc::RepeatedField<global::ReMastersLib.ItemExchange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.ItemExchange> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemExchangeTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemExchangeTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemExchangeTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
