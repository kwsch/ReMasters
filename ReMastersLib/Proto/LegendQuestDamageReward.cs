// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/LegendQuestDamageReward.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/LegendQuestDamageReward.proto</summary>
  public static partial class LegendQuestDamageRewardReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/LegendQuestDamageReward.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LegendQuestDamageRewardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNQcm90by9MZWdlbmRRdWVzdERhbWFnZVJld2FyZC5wcm90bxIMUmVNYXN0",
            "ZXJzTGliIowBChdMZWdlbmRRdWVzdERhbWFnZVJld2FyZBIWCg5zdG9yeV9x",
            "dWVzdF9pZBgBIAEoAxINCgVnYXVnZRgCIAEoBRISCgpwZXJjZW50YWdlGAMg",
            "ASgFEhkKEWl0ZW1fc2V0X2lkX2ZpcnN0GAQgASgDEhsKE2l0ZW1fc2V0X2lk",
            "X2dlbmVyYWwYBSABKAMiVgocTGVnZW5kUXVlc3REYW1hZ2VSZXdhcmRUYWJs",
            "ZRI2CgdlbnRyaWVzGAEgAygLMiUuUmVNYXN0ZXJzTGliLkxlZ2VuZFF1ZXN0",
            "RGFtYWdlUmV3YXJkYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.LegendQuestDamageReward), global::ReMastersLib.LegendQuestDamageReward.Parser, new[]{ "StoryQuestId", "Gauge", "Percentage", "ItemSetIdFirst", "ItemSetIdGeneral" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.LegendQuestDamageRewardTable), global::ReMastersLib.LegendQuestDamageRewardTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LegendQuestDamageReward : pb::IMessage<LegendQuestDamageReward> {
    private static readonly pb::MessageParser<LegendQuestDamageReward> _parser = new pb::MessageParser<LegendQuestDamageReward>(() => new LegendQuestDamageReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LegendQuestDamageReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.LegendQuestDamageRewardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LegendQuestDamageReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LegendQuestDamageReward(LegendQuestDamageReward other) : this() {
      storyQuestId_ = other.storyQuestId_;
      gauge_ = other.gauge_;
      percentage_ = other.percentage_;
      itemSetIdFirst_ = other.itemSetIdFirst_;
      itemSetIdGeneral_ = other.itemSetIdGeneral_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LegendQuestDamageReward Clone() {
      return new LegendQuestDamageReward(this);
    }

    /// <summary>Field number for the "story_quest_id" field.</summary>
    public const int StoryQuestIdFieldNumber = 1;
    private long storyQuestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StoryQuestId {
      get { return storyQuestId_; }
      set {
        storyQuestId_ = value;
      }
    }

    /// <summary>Field number for the "gauge" field.</summary>
    public const int GaugeFieldNumber = 2;
    private int gauge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gauge {
      get { return gauge_; }
      set {
        gauge_ = value;
      }
    }

    /// <summary>Field number for the "percentage" field.</summary>
    public const int PercentageFieldNumber = 3;
    private int percentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Percentage {
      get { return percentage_; }
      set {
        percentage_ = value;
      }
    }

    /// <summary>Field number for the "item_set_id_first" field.</summary>
    public const int ItemSetIdFirstFieldNumber = 4;
    private long itemSetIdFirst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemSetIdFirst {
      get { return itemSetIdFirst_; }
      set {
        itemSetIdFirst_ = value;
      }
    }

    /// <summary>Field number for the "item_set_id_general" field.</summary>
    public const int ItemSetIdGeneralFieldNumber = 5;
    private long itemSetIdGeneral_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemSetIdGeneral {
      get { return itemSetIdGeneral_; }
      set {
        itemSetIdGeneral_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LegendQuestDamageReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LegendQuestDamageReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoryQuestId != other.StoryQuestId) return false;
      if (Gauge != other.Gauge) return false;
      if (Percentage != other.Percentage) return false;
      if (ItemSetIdFirst != other.ItemSetIdFirst) return false;
      if (ItemSetIdGeneral != other.ItemSetIdGeneral) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StoryQuestId != 0L) hash ^= StoryQuestId.GetHashCode();
      if (Gauge != 0) hash ^= Gauge.GetHashCode();
      if (Percentage != 0) hash ^= Percentage.GetHashCode();
      if (ItemSetIdFirst != 0L) hash ^= ItemSetIdFirst.GetHashCode();
      if (ItemSetIdGeneral != 0L) hash ^= ItemSetIdGeneral.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StoryQuestId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StoryQuestId);
      }
      if (Gauge != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gauge);
      }
      if (Percentage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Percentage);
      }
      if (ItemSetIdFirst != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ItemSetIdFirst);
      }
      if (ItemSetIdGeneral != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ItemSetIdGeneral);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StoryQuestId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StoryQuestId);
      }
      if (Gauge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gauge);
      }
      if (Percentage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Percentage);
      }
      if (ItemSetIdFirst != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemSetIdFirst);
      }
      if (ItemSetIdGeneral != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemSetIdGeneral);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LegendQuestDamageReward other) {
      if (other == null) {
        return;
      }
      if (other.StoryQuestId != 0L) {
        StoryQuestId = other.StoryQuestId;
      }
      if (other.Gauge != 0) {
        Gauge = other.Gauge;
      }
      if (other.Percentage != 0) {
        Percentage = other.Percentage;
      }
      if (other.ItemSetIdFirst != 0L) {
        ItemSetIdFirst = other.ItemSetIdFirst;
      }
      if (other.ItemSetIdGeneral != 0L) {
        ItemSetIdGeneral = other.ItemSetIdGeneral;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoryQuestId = input.ReadInt64();
            break;
          }
          case 16: {
            Gauge = input.ReadInt32();
            break;
          }
          case 24: {
            Percentage = input.ReadInt32();
            break;
          }
          case 32: {
            ItemSetIdFirst = input.ReadInt64();
            break;
          }
          case 40: {
            ItemSetIdGeneral = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LegendQuestDamageRewardTable : pb::IMessage<LegendQuestDamageRewardTable> {
    private static readonly pb::MessageParser<LegendQuestDamageRewardTable> _parser = new pb::MessageParser<LegendQuestDamageRewardTable>(() => new LegendQuestDamageRewardTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LegendQuestDamageRewardTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.LegendQuestDamageRewardReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LegendQuestDamageRewardTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LegendQuestDamageRewardTable(LegendQuestDamageRewardTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LegendQuestDamageRewardTable Clone() {
      return new LegendQuestDamageRewardTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.LegendQuestDamageReward> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.LegendQuestDamageReward.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.LegendQuestDamageReward> entries_ = new pbc::RepeatedField<global::ReMastersLib.LegendQuestDamageReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.LegendQuestDamageReward> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LegendQuestDamageRewardTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LegendQuestDamageRewardTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LegendQuestDamageRewardTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
