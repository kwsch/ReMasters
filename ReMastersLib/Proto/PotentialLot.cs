// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/PotentialLot.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/PotentialLot.proto</summary>
  public static partial class PotentialLotReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/PotentialLot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PotentialLotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9Qb3RlbnRpYWxMb3QucHJvdG8SDFJlTWFzdGVyc0xpYiJMCgxQ",
            "b3RlbnRpYWxMb3QSGAoQcG90ZW50aWFsX2xvdF9pZBgBIAEoBRIUCgxwb3Rl",
            "bnRpYWxfaWQYAiABKAUSDAoEcmF0ZRgDIAEoBSJAChFQb3RlbnRpYWxMb3RU",
            "YWJsZRIrCgdlbnRyaWVzGAEgAygLMhouUmVNYXN0ZXJzTGliLlBvdGVudGlh",
            "bExvdGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.PotentialLot), global::ReMastersLib.PotentialLot.Parser, new[]{ "PotentialLotId", "PotentialId", "Rate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.PotentialLotTable), global::ReMastersLib.PotentialLotTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PotentialLot : pb::IMessage<PotentialLot> {
    private static readonly pb::MessageParser<PotentialLot> _parser = new pb::MessageParser<PotentialLot>(() => new PotentialLot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PotentialLot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.PotentialLotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotentialLot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotentialLot(PotentialLot other) : this() {
      potentialLotId_ = other.potentialLotId_;
      potentialId_ = other.potentialId_;
      rate_ = other.rate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotentialLot Clone() {
      return new PotentialLot(this);
    }

    /// <summary>Field number for the "potential_lot_id" field.</summary>
    public const int PotentialLotIdFieldNumber = 1;
    private int potentialLotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PotentialLotId {
      get { return potentialLotId_; }
      set {
        potentialLotId_ = value;
      }
    }

    /// <summary>Field number for the "potential_id" field.</summary>
    public const int PotentialIdFieldNumber = 2;
    private int potentialId_;
    /// <summary>
    /// Potential.pb / passive_skill_name_xx.lsd / passive_skill_description_xx.lsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PotentialId {
      get { return potentialId_; }
      set {
        potentialId_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 3;
    private int rate_;
    /// <summary>
    ///
    ///Not a percentage! doing a sum of all messages with the same
    ///potential_lot_id is needed to obtain the actual percentage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PotentialLot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PotentialLot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PotentialLotId != other.PotentialLotId) return false;
      if (PotentialId != other.PotentialId) return false;
      if (Rate != other.Rate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PotentialLotId != 0) hash ^= PotentialLotId.GetHashCode();
      if (PotentialId != 0) hash ^= PotentialId.GetHashCode();
      if (Rate != 0) hash ^= Rate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PotentialLotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PotentialLotId);
      }
      if (PotentialId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PotentialId);
      }
      if (Rate != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PotentialLotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PotentialLotId);
      }
      if (PotentialId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PotentialId);
      }
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PotentialLot other) {
      if (other == null) {
        return;
      }
      if (other.PotentialLotId != 0) {
        PotentialLotId = other.PotentialLotId;
      }
      if (other.PotentialId != 0) {
        PotentialId = other.PotentialId;
      }
      if (other.Rate != 0) {
        Rate = other.Rate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PotentialLotId = input.ReadInt32();
            break;
          }
          case 16: {
            PotentialId = input.ReadInt32();
            break;
          }
          case 24: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PotentialLotTable : pb::IMessage<PotentialLotTable> {
    private static readonly pb::MessageParser<PotentialLotTable> _parser = new pb::MessageParser<PotentialLotTable>(() => new PotentialLotTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PotentialLotTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.PotentialLotReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotentialLotTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotentialLotTable(PotentialLotTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotentialLotTable Clone() {
      return new PotentialLotTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.PotentialLot> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.PotentialLot.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.PotentialLot> entries_ = new pbc::RepeatedField<global::ReMastersLib.PotentialLot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.PotentialLot> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PotentialLotTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PotentialLotTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PotentialLotTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
