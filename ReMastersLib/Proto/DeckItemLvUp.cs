// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/DeckItemLvUp.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/DeckItemLvUp.proto</summary>
  public static partial class DeckItemLvUpReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/DeckItemLvUp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeckItemLvUpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9EZWNrSXRlbUx2VXAucHJvdG8SDFJlTWFzdGVyc0xpYiJbCgxE",
            "ZWNrSXRlbUx2VXASDwoHaXRlbV9pZBgBIAEoAxISCgppdGVtX2xldmVsGAIg",
            "ASgFEhEKCWNvaW5fY29zdBgDIAEoBRITCgtpdGVtX3NldF9pZBgEIAEoAyJA",
            "ChFEZWNrSXRlbUx2VXBUYWJsZRIrCgdlbnRyaWVzGAEgAygLMhouUmVNYXN0",
            "ZXJzTGliLkRlY2tJdGVtTHZVcGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.DeckItemLvUp), global::ReMastersLib.DeckItemLvUp.Parser, new[]{ "ItemId", "ItemLevel", "CoinCost", "ItemSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.DeckItemLvUpTable), global::ReMastersLib.DeckItemLvUpTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DeckItemLvUp : pb::IMessage<DeckItemLvUp> {
    private static readonly pb::MessageParser<DeckItemLvUp> _parser = new pb::MessageParser<DeckItemLvUp>(() => new DeckItemLvUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckItemLvUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.DeckItemLvUpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUp(DeckItemLvUp other) : this() {
      itemId_ = other.itemId_;
      itemLevel_ = other.itemLevel_;
      coinCost_ = other.coinCost_;
      itemSetId_ = other.itemSetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUp Clone() {
      return new DeckItemLvUp(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private long itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_level" field.</summary>
    public const int ItemLevelFieldNumber = 2;
    private int itemLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemLevel {
      get { return itemLevel_; }
      set {
        itemLevel_ = value;
      }
    }

    /// <summary>Field number for the "coin_cost" field.</summary>
    public const int CoinCostFieldNumber = 3;
    private int coinCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoinCost {
      get { return coinCost_; }
      set {
        coinCost_ = value;
      }
    }

    /// <summary>Field number for the "item_set_id" field.</summary>
    public const int ItemSetIdFieldNumber = 4;
    private long itemSetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemSetId {
      get { return itemSetId_; }
      set {
        itemSetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckItemLvUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckItemLvUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemLevel != other.ItemLevel) return false;
      if (CoinCost != other.CoinCost) return false;
      if (ItemSetId != other.ItemSetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0L) hash ^= ItemId.GetHashCode();
      if (ItemLevel != 0) hash ^= ItemLevel.GetHashCode();
      if (CoinCost != 0) hash ^= CoinCost.GetHashCode();
      if (ItemSetId != 0L) hash ^= ItemSetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ItemId);
      }
      if (ItemLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemLevel);
      }
      if (CoinCost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CoinCost);
      }
      if (ItemSetId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ItemSetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemId);
      }
      if (ItemLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemLevel);
      }
      if (CoinCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinCost);
      }
      if (ItemSetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemSetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckItemLvUp other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0L) {
        ItemId = other.ItemId;
      }
      if (other.ItemLevel != 0) {
        ItemLevel = other.ItemLevel;
      }
      if (other.CoinCost != 0) {
        CoinCost = other.CoinCost;
      }
      if (other.ItemSetId != 0L) {
        ItemSetId = other.ItemSetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt64();
            break;
          }
          case 16: {
            ItemLevel = input.ReadInt32();
            break;
          }
          case 24: {
            CoinCost = input.ReadInt32();
            break;
          }
          case 32: {
            ItemSetId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeckItemLvUpTable : pb::IMessage<DeckItemLvUpTable> {
    private static readonly pb::MessageParser<DeckItemLvUpTable> _parser = new pb::MessageParser<DeckItemLvUpTable>(() => new DeckItemLvUpTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeckItemLvUpTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.DeckItemLvUpReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUpTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUpTable(DeckItemLvUpTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeckItemLvUpTable Clone() {
      return new DeckItemLvUpTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.DeckItemLvUp> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.DeckItemLvUp.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.DeckItemLvUp> entries_ = new pbc::RepeatedField<global::ReMastersLib.DeckItemLvUp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.DeckItemLvUp> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeckItemLvUpTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeckItemLvUpTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeckItemLvUpTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
